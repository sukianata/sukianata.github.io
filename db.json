{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/banner.jpg","path":"images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1526950836214},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1526950836212},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1526950836217},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1526950836238},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1526950836218},{"_id":"themes/next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1526950836240},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1526950836244},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1526950836241},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1526950836246},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1526950836247},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1526950836256},{"_id":"themes/next/_config.yml","hash":"7ffba9241056499bef3b8e9f7ba430b941628669","modified":1527251477632},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1526950836310},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1526950836259},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1526950836615},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1526950836122},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1526950836170},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1526950831198},{"_id":"themes/next/.git/packed-refs","hash":"e277289607b97219cf350f6a9de7e6cbb9c9e510","modified":1526950836101},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1526950836225},{"_id":"themes/next/.git/index","hash":"63d866a4916ff13434c233904e4cf4e082966168","modified":1527668124302},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1526950836229},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1526950836231},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526950836234},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1526950836235},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1526950836315},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1526950836222},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1526950836316},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1526950836313},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1526950836323},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1526950836325},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1526950836320},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1526950836319},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1526950836326},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1526950836330},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1526950836332},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1526950836329},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1526950836328},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1526950836333},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1526950836335},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1526950836336},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1526950836339},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1526950836338},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1526950836347},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1526950836602},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1526950836599},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1526950836609},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1526950836606},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1526950836613},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1526950836611},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1526950836263},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1526950836266},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1526950836604},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1526950836261},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1526950836269},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1526950836273},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1526950836265},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1526950836277},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1526950836279},{"_id":"themes/next/source/404.html","hash":"4d6b569acfd9e89247053eadbeb36313633ee8a0","modified":1527249959580},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1526950836617},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1526950836620},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1526950836622},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1526950836283},{"_id":"source/About/index.md","hash":"922dacca69736a7670702fe65c75d56d11013638","modified":1526975772490},{"_id":"source/Categories/index.md","hash":"2d9cd193a9f5f6a8bebed6cf9d7be4013e77ea43","modified":1526974656436},{"_id":"source/Tags/index.md","hash":"a97bdc3427e0808f034032d48f16ae915e29bb46","modified":1526974575576},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1526950837078},{"_id":"source/_posts/javaweb.md","hash":"53ee8385ba9fe731ebcb8ad03db138cf57fa3bde","modified":1527751351921},{"_id":"source/_posts/Test2.md","hash":"d27eb539d5806739d5ee6398f66a3c7b42154684","modified":1526978978766},{"_id":"source/_posts/This-is-a-test.md","hash":"845b427845685f99a2a97b1c3c0eb2e9f80056f9","modified":1526978984746},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1526950837073},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1526950837075},{"_id":"source/_posts/push-test.md","hash":"ea515b2c5bf2fe742ed4554a8d0c7ab8db114024","modified":1527666774026},{"_id":"source/_posts/java基礎.md","hash":"a23afb11a20fc30840f3c6973bc59a447dabc7f0","modified":1527730501836},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836911},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1526950831239},{"_id":"themes/next/.git/logs/HEAD","hash":"8b6a464024008b7ecbbc563f82e706ac81844270","modified":1526950836133},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1526950831201},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1526950831204},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1526950831211},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1526950831207},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1526950831214},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1526950831228},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1526950831221},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1526950831224},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1526950831217},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1526950836342},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526950836344},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526950836345},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1526950831231},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1526950831235},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1526950836380},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1526950836382},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1526950836411},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1526950836385},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1526950836413},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1526950836359},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1526950836357},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1526950836364},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1526950836372},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1526950836378},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1526950836367},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1526950836433},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1526950836374},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1526950836437},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1526950836435},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1526950836452},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1526950836506},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1526950836529},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1526950836532},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1526950836566},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1526950836555},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1526950836569},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1526950836571},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1526950836579},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1526950836574},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1526950836289},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1526950836290},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1526950836294},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1526950836287},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1526950836296},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1526950836292},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1526950836300},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1526950836309},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1526950836303},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1526950836301},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1526950836305},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1526950836307},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1526950836298},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1526950836908},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526950836915},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526950836912},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526950836919},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526950836930},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526950836927},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526950836917},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526950836934},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526950836945},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526950836947},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526950836942},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526950836923},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526950836950},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526950836948},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526950836952},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1526950836633},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526950836953},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526950836938},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526950836955},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1526950836642},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526950836958},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1526950836638},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1526950836651},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1526950836655},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1526950836636},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1526950836644},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1526950836653},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1526950836657},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1526950836660},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"5142ae709bf54806b521c030baae48f21709098e","modified":1527152133818},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836447},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836448},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836838},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836837},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836843},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836898},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526950836907},{"_id":"themes/next/.git/refs/heads/master","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1526950836131},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1526950836398},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1526950836402},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1526950836404},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1526950836400},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1526950836388},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1526950836390},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1526950836415},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1526950836416},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1526950836421},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1526950836418},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1526950836393},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1526950836423},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1526950836429},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1526950836425},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1526950836352},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1526950836430},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1526950836354},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526950836445},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1526950836440},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526950836449},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1526950836456},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1526950836460},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1526950836462},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1526950836458},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1526950836465},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1526950836467},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1526950836473},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1526950836476},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1526950836504},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1526950836470},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1526950836498},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1526950836492},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1526950836509},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1526950836501},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1526950836518},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1526950836524},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1526950836521},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1526950836513},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1526950836526},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1526950836522},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1526950836561},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1526950836559},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1526950836597},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1526950836515},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1526950836563},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1526950836586},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1526950836594},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526950836964},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1526950836968},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1526950836588},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526950836971},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1526950836977},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526950836961},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526950836974},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526950836986},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1526950836981},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1526950836834},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526950836988},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1526950836836},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1526950836839},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1526950836992},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1526950836897},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1526950836841},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1526950836899},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1526950836902},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1526950836999},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526950837003},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1526950837001},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1526950837005},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1526950836997},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1526950836895},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526950837062},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526950837056},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526950837067},{"_id":"themes/next/.git/objects/pack/pack-9829b0de980dc403efcab0fab027fd96c783804d.idx","hash":"118683259e5b358ac99d3441dedb260235a098dc","modified":1526950835911},{"_id":"themes/next/source/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1526896949519},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526950837031},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8b6a464024008b7ecbbc563f82e706ac81844270","modified":1526950836139},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1526950836118},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1526950836584},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526950836984},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1526950836582},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1526950836666},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1526950836664},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1526950836668},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1526950836671},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1526950836673},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1526950836770},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1526950836713},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1526950836817},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1526950836819},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1526950836824},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1526950836822},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1526950836830},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1526950836826},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1526950836850},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1526978638226},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1526950836853},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1526950836831},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526950836859},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1526950836855},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1526950836861},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1526950836868},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1526950836857},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1526950836871},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1526950836870},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1526950836875},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1526950836845},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526950836873},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1526950836880},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1526950836881},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1526950836884},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1526950836886},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1526950836892},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1526950836890},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1526950836888},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526950837017},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526950837007},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526950837012},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526950837043},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526950837038},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526950837027},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526950837049},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526950837025},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8b6a464024008b7ecbbc563f82e706ac81844270","modified":1526950836117},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1526950836675},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1526950836690},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1526950836692},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1526950836695},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"3b2263fb6f85218d6025ca2f7869e0ef0a4f20f1","modified":1527250946095},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1526950836684},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1526950836682},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1526950836688},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1526950836686},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1526950836678},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1526950836699},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1526950836707},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1526950836709},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1526950836716},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1526950836704},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1526950836702},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1526950836722},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1526950836711},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1526950836723},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1526950836720},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1526950836725},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1526950836727},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1526950836729},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1526950836717},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1526950836731},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1526950836737},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1527250635478},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1526950836735},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1526950836739},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1526950836741},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1526950836742},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1526950836747},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1526950836744},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1526950836756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1526950836749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1526950836754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1526950836758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1526950836762},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1526950836764},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1526950836766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1526950836760},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1526950836772},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1526950836774},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1526950836768},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1526950836776},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1526950836778},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1526950836780},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1526950836791},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1526950836782},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1526950836789},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1526950836796},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1526950836786},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1526950836794},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1526950836803},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1526950836807},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1526950836798},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1526950836813},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1526950836815},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1526950836864},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526950836866},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1526950836811},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1526950836805},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526950837023},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526950836877},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1526950836808},{"_id":"themes/next/.git/objects/pack/pack-9829b0de980dc403efcab0fab027fd96c783804d.pack","hash":"9e1759de63e19531772b171ae72c0b4bb3787630","modified":1526950835962},{"_id":"public/About/index.html","hash":"a9696742628ae5fa1a6eb06a8be3e41177ca6451","modified":1527751401860},{"_id":"public/Categories/index.html","hash":"aebba45832152aed99213919bbdd2cd43b06e68b","modified":1527751401861},{"_id":"public/Tags/index.html","hash":"7f2a74484e54787c6abadf25bcfbd5321ba5933d","modified":1527751401861},{"_id":"public/2018/05/30/push-test/index.html","hash":"b465b590df1335d5f60a4583e58bea7e64cdfc1c","modified":1527751401861},{"_id":"public/archives/index.html","hash":"de9a7a5481571bbc267bbb2763df290de7abc79f","modified":1527751401861},{"_id":"public/archives/2018/index.html","hash":"fe3a24d529fc286513dffc92a3c4df6224b6cbbd","modified":1527751401861},{"_id":"public/archives/2018/05/index.html","hash":"8ae791bcce3123a15372ab304b5f0a0b8879a1bb","modified":1527751401861},{"_id":"public/categories/catTest/index.html","hash":"a89f810d45e791c5d471808b20e6ba935cb84ce6","modified":1527751401862},{"_id":"public/tags/标签1/index.html","hash":"68727a81b8e932c6f092811e725151c02f5e7ab4","modified":1527751401862},{"_id":"public/tags/标签2/index.html","hash":"251d3199595e2caebc7949230424795edfce3565","modified":1527751401862},{"_id":"public/tags/other/index.html","hash":"934755aea353ed47c9bff876781000052d5cdd00","modified":1527751401862},{"_id":"public/tags/java/index.html","hash":"c97a34e05d28e48057827073bc403b0469cb7b7b","modified":1527751401862},{"_id":"public/2018/05/31/java基礎/index.html","hash":"b11b42d56f84e67756548841c53f0bd3c0e4d55a","modified":1527751401862},{"_id":"public/2018/05/22/Test2/index.html","hash":"027812a85c460d745292a99ab9092f3224677cab","modified":1527751401862},{"_id":"public/2018/05/22/This-is-a-test/index.html","hash":"f75267801b6c83352030b2a44fced8b28c9fbbef","modified":1527751401862},{"_id":"public/index.html","hash":"222ecf4c571a4cad6ddadf5c08a9793027298d0b","modified":1527751401863},{"_id":"public/2018/05/31/javaweb/index.html","hash":"7422f57277f686d95945c73d96ee8d9b7fdac83e","modified":1527751401866},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527751401868},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527751401868},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527751401868},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527751401868},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527751401868},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527751401868},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527751401868},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527751401868},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527751401868},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527751401868},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527751401868},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527751401868},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527751401869},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527751401869},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527751401869},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527751401869},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527751401869},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527751401869},{"_id":"public/images/wechatpay.jpg","hash":"5142ae709bf54806b521c030baae48f21709098e","modified":1527751401869},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527751401869},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527751401869},{"_id":"public/404.html","hash":"d9a66c7f63f11d28e6522321e3167a27c402b59b","modified":1527751403742},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527751403743},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527751403746},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527751403749},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1527751403749},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527751403749},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1527751403749},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527751403749},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527751403749},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527751403749},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527751403749},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1527751403750},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1527751403750},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1527751403750},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527751403750},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527751403750},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527751403750},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527751403750},{"_id":"public/css/main.css","hash":"e1801e9665549c518d0518528c70afc6a703b874","modified":1527751403750},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527751403750},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527751403750},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527751403750},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527751403750},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527751403750},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527751403751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527751403751},{"_id":"public/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1527751403757}],"Category":[{"name":"catTest","_id":"cjhu7qk5g0006kwmk737dn1a4"}],"Data":[],"Page":[{"title":"About","date":"2018-05-22T07:11:41.000Z","type":"about","_content":"\n##If you have some questions then you can contact me by following ways.\n\n* Email: 2655716003@qq.com\n  \n* WeChat: HZKJDXHF2012\n    \n\n","source":"About/index.md","raw":"---\ntitle: About\ndate: 2018-05-22 15:11:41\ntype: \"about\"\n---\n\n##If you have some questions then you can contact me by following ways.\n\n* Email: 2655716003@qq.com\n  \n* WeChat: HZKJDXHF2012\n    \n\n","updated":"2018-05-22T07:56:12.490Z","path":"About/index.html","comments":1,"layout":"page","_id":"cjhu7qk540000kwmk2xtfu8qa","content":"<p>##If you have some questions then you can contact me by following ways.</p>\n<ul>\n<li><p>Email: <a href=\"mailto:2655716003@qq.com\" target=\"_blank\" rel=\"noopener\">2655716003@qq.com</a></p>\n</li>\n<li><p>WeChat: HZKJDXHF2012</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##If you have some questions then you can contact me by following ways.</p>\n<ul>\n<li><p>Email: <a href=\"mailto:2655716003@qq.com\" target=\"_blank\" rel=\"noopener\">2655716003@qq.com</a></p>\n</li>\n<li><p>WeChat: HZKJDXHF2012</p>\n</li>\n</ul>\n"},{"title":"Categories","date":"2018-05-22T07:18:18.000Z","type":"categories","_content":"","source":"Categories/index.md","raw":"---\ntitle: Categories\ndate: 2018-05-22 15:18:18\ntype: \"categories\"\n---\n","updated":"2018-05-22T07:37:36.436Z","path":"Categories/index.html","comments":1,"layout":"page","_id":"cjhu7qk5b0002kwmkoxmpg9ux","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2018-05-22T07:17:57.000Z","type":"tags","_content":"","source":"Tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-05-22 15:17:57\ntype: \"tags\"\n---\n","updated":"2018-05-22T07:36:15.576Z","path":"Tags/index.html","comments":1,"layout":"page","_id":"cjhu7qk5e0004kwmkj6111d14","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"javaweb","date":"2018-05-31T07:21:42.000Z","_content":"*這部分主要涉及在做java web開發過程中涉及到的知識。*\n###java web\n1. ###XML文檔定義和解析有幾種形式？它們之間有何本質區別\n\t約束有DTD和Schema兩種形式，Schema本身也是xml文件，約束能力更強。  \n\t解析xml主要有DOM，SAX,StAx(java6引入)。  \n\t其中DOM在處理大型文件時性能下降厲害，因為DOM樹結構佔用的內存較多，解析前必須將整個文檔裝入內存，適合對xml的隨機訪問。  \n\tSAX是事件驅動型解析方式，順序讀取，遇見開頭、結束或開頭標籤結束標籤時會觸發一個事件，用戶通過回調代碼來處理xml文件。\n\t    \n2. ####簡述jdbc操作數據庫的步驟  \n  2.1 加載驅動  \n  \n\t```java  \n\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\t```  \n  2.2 創建連接  \n  \n\t```Connection con =　DriverManager.getConnection(\"jdbc:oracle:thin@localhost:1521:orcl\",\"root\",\"root\");```   \n  2.3 創建語句\n\t<pre>\n\t PreparedStatement ps =con.prePareStatement(\"select * from table_Name\")\n\t//設置參數的方式：ps.setInt(index,value);index從1開始\n\t</pre>   \n  2.4 執行語句  \n\n\t```ResultSet rs =ps.executeQuery();```  \n  2.5 處理結果  \n\t<pre>\n\t\twhile(rs.next()){\n\t\t  //do something here \n\t\t  System.out.println(rs.getString(\"name\"));\n\t\t}\n\t</pre>\n  2.6 關閉資源  \n\n\t提示：關閉外部資源的順序和打開的順序相反。  \n  \n3. ####Statement和PrepareStatement區別。\n\t* 後者為預編譯，可增加安全性，且可帶參數。\n\t* 當批量處理SQL或頻繁執行相同的查詢時，後者有明顯性能上的優勢，因為數據庫可將編譯優化后的SQL語句緩存起來。\n\t* 調用存儲過程通過CallableStatement接口  \n\t\n4. ####使用JDBC時，如何提升讀取和更新數據的性能？  \n\t* 讀取：rs.setFetchSize();指定每次抓取的記錄數。\n\t* 更新：使用PrepareStatement構建批量處理。\n\n5. ####數據庫連接池的作用\n\t減少性能開銷。\n\t創建鏈接需要進行TCP的三次握手，釋放鏈接四次。\n\t有關TCP握手，點擊[這裡(待補充)](http://www.baidu.com)  \n6. ####事物的ACID指什麼？  \n\t* Atiomic:原子性。事物中每個操作，要麼全做要麼全不做。  \n\t* Consistent:一致性。事物結束后系統狀態是一致的。\n\t* Isolated:隔離性。并發執行的事物無法看見對方的中間狀態。\n\t* Durable:持久性。事物完成后所做的改動都會被持久化。  \n\t\n\t補充幾個概念：\n\t* 髒讀：A事物讀取B事物尚未提交的數據，若B進行回滾，則A讀到的數據就是臟數據。\n\t* 不可重複讀：事物A重新讀取前面讀過的數據發現該數據已經被修改過了。\n\t* 幻讀：事物A重新執行一個查詢，發現其中插入了被B提交的事物。\n\t* 第1類丟失更新：事物A撤銷時，把已經提交事物B更新的數據覆蓋了。\n\t* 第2類丟失更新：事物A覆蓋事物B已經提交的數據，造成事物B所做的操作丟失。\n\t  \n\t數據庫通過鎖機制來解決數據並發訪問問題，且提供自動鎖機制，只需要用戶指定會話的事物隔離級別。\n\t  \n7. ####JDBC能否處理Blod和Clob \n\t能。補充：Blob為二進制大對象，Clob指大字符對象。  \n8. ####獲得一個類的類對象有哪些方式\n\t* String.class\n\t* \"hello\".getClass()\n\t* Class.forName()\n9. ####如何通過反射創建對象\n\t* 通過類對象調用newInstance(),eg: ```String.class.getNewInstance();```\n\t*  通過類對象的getConstructor()或getDeclaredContructor()方法獲得構造器對象并調用其newInstance()方法創建對象，eg: ```String.class.getConstructor(String.class).getNewInstance(\"hello\");```\n\t  \n10. 簡述面向對象的六原則一法則\n\t* 單一職責原則：一個類只做它該做的事，不涉及其它無關領域。\n\t* 開閉原則：類應該對擴展開放，對修改關係。例如增加新功能時，只需要從原來系統派生出新類，而不需要修改原有代碼\n\t* 依賴倒轉原則：面向接口編程。\n\t* 里氏替換原則：簡單的說，就是能用父類型的地方就一定能使用子類型。\n\t* 接口隔離原則：接口要小而專，不能大而全。\n\t* 合成聚合原則： 優先使用聚合或合成關係複用代碼，例如工具類可以拿來直接用，不需要繼承。\n\t* 迪米特法則：又稱最少知識原則，一個對象應當對其它對象有可能少的了解。\n\n11. ####簡述你了解的的設計模式。\n\t有關於23種設計模式，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩三個記住並可以寫出demo來。\n12. ####列舉一些java中常用的排序算法\n\t有關於常用的排序算法，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩個記住並能寫出來。例如冒泡排序。\n13. ####列舉一些java中常用的查找算法  \n\t有關於常用的查找算法，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩個記住並能寫出來。例如二分查找。 \n14. ####實現會話跟蹤的技術有哪些 \n\t* url重寫：將唯一的繪畫ID添加到url結尾\n\t* 設置隱藏表單域：將繪話相關的字段添加到隱式表單域中，這些信息提交表單會提交給服務器。\n\t* cookie:\n\t\t* 基於瀏覽器窗口，關閉后沒有了\n\t\t* 生成臨時文件\n\t  注意事項：不要存放敏感信息，不能存放過多內容\n\t*HttpSession:最強大，功能最多，當一個用戶第一次訪問某網站時會自動創建HttpSession,放在服務器內存中\n15. ####Hibernate的一級緩存、二級緩存和查詢緩存\n\t* 一級緩存功能默認有效。當程序保存、修改持久化實體時，Session不會立即把改變提交到數據庫，而是緩存到當前的session中，除非顯示調用session的flush方法，或關閉session.通過一級緩存可減少程序與數據庫的交互。\n\t* SessionFactory的二級緩存是全局性的，所有session共享這個二級緩存，默認關閉。開啟時需要指定使用二級緩存的實體類，和二級緩存實現類，sessionFactory就會緩存訪問過該實體類的每個對象，直到緩存數據超出緩存空間。\n\t* 上面兩級緩存都是對整個實體進行緩存，查詢緩存可緩存普通屬性。將HQL或SQL語句及他們的查詢結果作為鍵值對進行緩存，對於同樣的查詢可以直接從緩存中獲取數據，默認關閉。\n\n16. ####MyBatis中使用#和$書寫佔位符的區別\n\t'#'將傳入的參數當成字符串，會自動加上引號；  \n     $將參數直接顯示在生成的sql中，不安全，盡量不用\n\t寫order by 時應該用$ ","source":"_posts/javaweb.md","raw":"---\ntitle: javaweb\ndate: 2018-05-31 15:21:42\ntags:\n---\n*這部分主要涉及在做java web開發過程中涉及到的知識。*\n###java web\n1. ###XML文檔定義和解析有幾種形式？它們之間有何本質區別\n\t約束有DTD和Schema兩種形式，Schema本身也是xml文件，約束能力更強。  \n\t解析xml主要有DOM，SAX,StAx(java6引入)。  \n\t其中DOM在處理大型文件時性能下降厲害，因為DOM樹結構佔用的內存較多，解析前必須將整個文檔裝入內存，適合對xml的隨機訪問。  \n\tSAX是事件驅動型解析方式，順序讀取，遇見開頭、結束或開頭標籤結束標籤時會觸發一個事件，用戶通過回調代碼來處理xml文件。\n\t    \n2. ####簡述jdbc操作數據庫的步驟  \n  2.1 加載驅動  \n  \n\t```java  \n\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\t```  \n  2.2 創建連接  \n  \n\t```Connection con =　DriverManager.getConnection(\"jdbc:oracle:thin@localhost:1521:orcl\",\"root\",\"root\");```   \n  2.3 創建語句\n\t<pre>\n\t PreparedStatement ps =con.prePareStatement(\"select * from table_Name\")\n\t//設置參數的方式：ps.setInt(index,value);index從1開始\n\t</pre>   \n  2.4 執行語句  \n\n\t```ResultSet rs =ps.executeQuery();```  \n  2.5 處理結果  \n\t<pre>\n\t\twhile(rs.next()){\n\t\t  //do something here \n\t\t  System.out.println(rs.getString(\"name\"));\n\t\t}\n\t</pre>\n  2.6 關閉資源  \n\n\t提示：關閉外部資源的順序和打開的順序相反。  \n  \n3. ####Statement和PrepareStatement區別。\n\t* 後者為預編譯，可增加安全性，且可帶參數。\n\t* 當批量處理SQL或頻繁執行相同的查詢時，後者有明顯性能上的優勢，因為數據庫可將編譯優化后的SQL語句緩存起來。\n\t* 調用存儲過程通過CallableStatement接口  \n\t\n4. ####使用JDBC時，如何提升讀取和更新數據的性能？  \n\t* 讀取：rs.setFetchSize();指定每次抓取的記錄數。\n\t* 更新：使用PrepareStatement構建批量處理。\n\n5. ####數據庫連接池的作用\n\t減少性能開銷。\n\t創建鏈接需要進行TCP的三次握手，釋放鏈接四次。\n\t有關TCP握手，點擊[這裡(待補充)](http://www.baidu.com)  \n6. ####事物的ACID指什麼？  \n\t* Atiomic:原子性。事物中每個操作，要麼全做要麼全不做。  \n\t* Consistent:一致性。事物結束后系統狀態是一致的。\n\t* Isolated:隔離性。并發執行的事物無法看見對方的中間狀態。\n\t* Durable:持久性。事物完成后所做的改動都會被持久化。  \n\t\n\t補充幾個概念：\n\t* 髒讀：A事物讀取B事物尚未提交的數據，若B進行回滾，則A讀到的數據就是臟數據。\n\t* 不可重複讀：事物A重新讀取前面讀過的數據發現該數據已經被修改過了。\n\t* 幻讀：事物A重新執行一個查詢，發現其中插入了被B提交的事物。\n\t* 第1類丟失更新：事物A撤銷時，把已經提交事物B更新的數據覆蓋了。\n\t* 第2類丟失更新：事物A覆蓋事物B已經提交的數據，造成事物B所做的操作丟失。\n\t  \n\t數據庫通過鎖機制來解決數據並發訪問問題，且提供自動鎖機制，只需要用戶指定會話的事物隔離級別。\n\t  \n7. ####JDBC能否處理Blod和Clob \n\t能。補充：Blob為二進制大對象，Clob指大字符對象。  \n8. ####獲得一個類的類對象有哪些方式\n\t* String.class\n\t* \"hello\".getClass()\n\t* Class.forName()\n9. ####如何通過反射創建對象\n\t* 通過類對象調用newInstance(),eg: ```String.class.getNewInstance();```\n\t*  通過類對象的getConstructor()或getDeclaredContructor()方法獲得構造器對象并調用其newInstance()方法創建對象，eg: ```String.class.getConstructor(String.class).getNewInstance(\"hello\");```\n\t  \n10. 簡述面向對象的六原則一法則\n\t* 單一職責原則：一個類只做它該做的事，不涉及其它無關領域。\n\t* 開閉原則：類應該對擴展開放，對修改關係。例如增加新功能時，只需要從原來系統派生出新類，而不需要修改原有代碼\n\t* 依賴倒轉原則：面向接口編程。\n\t* 里氏替換原則：簡單的說，就是能用父類型的地方就一定能使用子類型。\n\t* 接口隔離原則：接口要小而專，不能大而全。\n\t* 合成聚合原則： 優先使用聚合或合成關係複用代碼，例如工具類可以拿來直接用，不需要繼承。\n\t* 迪米特法則：又稱最少知識原則，一個對象應當對其它對象有可能少的了解。\n\n11. ####簡述你了解的的設計模式。\n\t有關於23種設計模式，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩三個記住並可以寫出demo來。\n12. ####列舉一些java中常用的排序算法\n\t有關於常用的排序算法，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩個記住並能寫出來。例如冒泡排序。\n13. ####列舉一些java中常用的查找算法  \n\t有關於常用的查找算法，點擊[這裡(待補充)](http://www.baidu.com)\n\t挑常用的兩個記住並能寫出來。例如二分查找。 \n14. ####實現會話跟蹤的技術有哪些 \n\t* url重寫：將唯一的繪畫ID添加到url結尾\n\t* 設置隱藏表單域：將繪話相關的字段添加到隱式表單域中，這些信息提交表單會提交給服務器。\n\t* cookie:\n\t\t* 基於瀏覽器窗口，關閉后沒有了\n\t\t* 生成臨時文件\n\t  注意事項：不要存放敏感信息，不能存放過多內容\n\t*HttpSession:最強大，功能最多，當一個用戶第一次訪問某網站時會自動創建HttpSession,放在服務器內存中\n15. ####Hibernate的一級緩存、二級緩存和查詢緩存\n\t* 一級緩存功能默認有效。當程序保存、修改持久化實體時，Session不會立即把改變提交到數據庫，而是緩存到當前的session中，除非顯示調用session的flush方法，或關閉session.通過一級緩存可減少程序與數據庫的交互。\n\t* SessionFactory的二級緩存是全局性的，所有session共享這個二級緩存，默認關閉。開啟時需要指定使用二級緩存的實體類，和二級緩存實現類，sessionFactory就會緩存訪問過該實體類的每個對象，直到緩存數據超出緩存空間。\n\t* 上面兩級緩存都是對整個實體進行緩存，查詢緩存可緩存普通屬性。將HQL或SQL語句及他們的查詢結果作為鍵值對進行緩存，對於同樣的查詢可以直接從緩存中獲取數據，默認關閉。\n\n16. ####MyBatis中使用#和$書寫佔位符的區別\n\t'#'將傳入的參數當成字符串，會自動加上引號；  \n     $將參數直接顯示在生成的sql中，不安全，盡量不用\n\t寫order by 時應該用$ ","slug":"javaweb","published":1,"updated":"2018-05-31T07:22:31.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu7qk560001kwmkktk1usjr","content":"<p><em>這部分主要涉及在做java web開發過程中涉及到的知識。</em></p>\n<p>###java web</p>\n<ol>\n<li><p>###XML文檔定義和解析有幾種形式？它們之間有何本質區別<br> 約束有DTD和Schema兩種形式，Schema本身也是xml文件，約束能力更強。<br> 解析xml主要有DOM，SAX,StAx(java6引入)。<br> 其中DOM在處理大型文件時性能下降厲害，因為DOM樹結構佔用的內存較多，解析前必須將整個文檔裝入內存，適合對xml的隨機訪問。<br> SAX是事件驅動型解析方式，順序讀取，遇見開頭、結束或開頭標籤結束標籤時會觸發一個事件，用戶通過回調代碼來處理xml文件。</p>\n</li>\n<li><p>####簡述jdbc操作數據庫的步驟<br>2.1 加載驅動  </p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tClass.forName(<span class=\"string\">\"oracle.jdbc.driver.OracleDriver\"</span>);</span><br><span class=\"line\">\t```  </span><br><span class=\"line\">  <span class=\"number\">2.2</span> 創建連接  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t```Connection con =　DriverManager.getConnection(<span class=\"string\">\"jdbc:oracle:thin@localhost:1521:orcl\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);```   </span><br><span class=\"line\">  <span class=\"number\">2.3</span> 創建語句</span><br><span class=\"line\">\t&lt;pre&gt;</span><br><span class=\"line\">\t PreparedStatement ps =con.prePareStatement(<span class=\"string\">\"select * from table_Name\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//設置參數的方式：ps.setInt(index,value);index從1開始</span></span><br><span class=\"line\">\t&lt;/pre&gt;   </span><br><span class=\"line\">  <span class=\"number\">2.4</span> 執行語句  </span><br><span class=\"line\"></span><br><span class=\"line\">\t```ResultSet rs =ps.executeQuery();```  </span><br><span class=\"line\">  <span class=\"number\">2.5</span> 處理結果  </span><br><span class=\"line\">\t&lt;pre&gt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t  <span class=\"comment\">//do something here </span></span><br><span class=\"line\">\t\t  System.out.println(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/pre&gt;</span><br><span class=\"line\">  <span class=\"number\">2.6</span> 關閉資源  </span><br><span class=\"line\"></span><br><span class=\"line\">\t提示：關閉外部資源的順序和打開的順序相反。  </span><br><span class=\"line\">  </span><br><span class=\"line\">3. ####Statement和PrepareStatement區別。</span><br><span class=\"line\">\t* 後者為預編譯，可增加安全性，且可帶參數。</span><br><span class=\"line\">\t* 當批量處理SQL或頻繁執行相同的查詢時，後者有明顯性能上的優勢，因為數據庫可將編譯優化后的SQL語句緩存起來。</span><br><span class=\"line\">\t* 調用存儲過程通過CallableStatement接口  </span><br><span class=\"line\">\t</span><br><span class=\"line\">4. ####使用JDBC時，如何提升讀取和更新數據的性能？  </span><br><span class=\"line\">\t* 讀取：rs.setFetchSize();指定每次抓取的記錄數。</span><br><span class=\"line\">\t* 更新：使用PrepareStatement構建批量處理。</span><br><span class=\"line\"></span><br><span class=\"line\">5. ####數據庫連接池的作用</span><br><span class=\"line\">\t減少性能開銷。</span><br><span class=\"line\">\t創建鏈接需要進行TCP的三次握手，釋放鏈接四次。</span><br><span class=\"line\">\t有關TCP握手，點擊[這裡(待補充)](http:<span class=\"comment\">//www.baidu.com)  </span></span><br><span class=\"line\">6. ####事物的ACID指什麼？  </span><br><span class=\"line\">\t* Atiomic:原子性。事物中每個操作，要麼全做要麼全不做。  </span><br><span class=\"line\">\t* Consistent:一致性。事物結束后系統狀態是一致的。</span><br><span class=\"line\">\t* Isolated:隔離性。并發執行的事物無法看見對方的中間狀態。</span><br><span class=\"line\">\t* Durable:持久性。事物完成后所做的改動都會被持久化。  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t補充幾個概念：</span><br><span class=\"line\">\t* 髒讀：A事物讀取B事物尚未提交的數據，若B進行回滾，則A讀到的數據就是臟數據。</span><br><span class=\"line\">\t* 不可重複讀：事物A重新讀取前面讀過的數據發現該數據已經被修改過了。</span><br><span class=\"line\">\t* 幻讀：事物A重新執行一個查詢，發現其中插入了被B提交的事物。</span><br><span class=\"line\">\t* 第<span class=\"number\">1</span>類丟失更新：事物A撤銷時，把已經提交事物B更新的數據覆蓋了。</span><br><span class=\"line\">\t* 第<span class=\"number\">2</span>類丟失更新：事物A覆蓋事物B已經提交的數據，造成事物B所做的操作丟失。</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t數據庫通過鎖機制來解決數據並發訪問問題，且提供自動鎖機制，只需要用戶指定會話的事物隔離級別。</span><br><span class=\"line\">\t  </span><br><span class=\"line\">7. ####JDBC能否處理Blod和Clob </span><br><span class=\"line\">\t能。補充：Blob為二進制大對象，Clob指大字符對象。  </span><br><span class=\"line\">8. ####獲得一個類的類對象有哪些方式</span><br><span class=\"line\">\t* String.class</span><br><span class=\"line\">\t* <span class=\"string\">\"hello\"</span>.getClass()</span><br><span class=\"line\">\t* Class.forName()</span><br><span class=\"line\">9. ####如何通過反射創建對象</span><br><span class=\"line\">\t* 通過類對象調用newInstance(),eg: ```String.class.getNewInstance();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通過類對象的getConstructor()或getDeclaredContructor()方法獲得構造器對象并調用其newInstance()方法創建對象，eg: <code>String.class.getConstructor(String.class).getNewInstance(&quot;hello&quot;);</code></li>\n</ul>\n</li>\n<li><p>簡述面向對象的六原則一法則</p>\n<ul>\n<li>單一職責原則：一個類只做它該做的事，不涉及其它無關領域。</li>\n<li>開閉原則：類應該對擴展開放，對修改關係。例如增加新功能時，只需要從原來系統派生出新類，而不需要修改原有代碼</li>\n<li>依賴倒轉原則：面向接口編程。</li>\n<li>里氏替換原則：簡單的說，就是能用父類型的地方就一定能使用子類型。</li>\n<li>接口隔離原則：接口要小而專，不能大而全。</li>\n<li>合成聚合原則： 優先使用聚合或合成關係複用代碼，例如工具類可以拿來直接用，不需要繼承。</li>\n<li>迪米特法則：又稱最少知識原則，一個對象應當對其它對象有可能少的了解。</li>\n</ul>\n</li>\n<li><p>####簡述你了解的的設計模式。<br>有關於23種設計模式，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩三個記住並可以寫出demo來。</p>\n</li>\n<li>####列舉一些java中常用的排序算法<br>有關於常用的排序算法，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩個記住並能寫出來。例如冒泡排序。</li>\n<li>####列舉一些java中常用的查找算法<br>有關於常用的查找算法，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩個記住並能寫出來。例如二分查找。 </li>\n<li>####實現會話跟蹤的技術有哪些 <ul>\n<li>url重寫：將唯一的繪畫ID添加到url結尾</li>\n<li>設置隱藏表單域：將繪話相關的字段添加到隱式表單域中，這些信息提交表單會提交給服務器。</li>\n<li>cookie:<ul>\n<li>基於瀏覽器窗口，關閉后沒有了</li>\n<li>生成臨時文件<br>注意事項：不要存放敏感信息，不能存放過多內容<br>*HttpSession:最強大，功能最多，當一個用戶第一次訪問某網站時會自動創建HttpSession,放在服務器內存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>####Hibernate的一級緩存、二級緩存和查詢緩存</p>\n<ul>\n<li>一級緩存功能默認有效。當程序保存、修改持久化實體時，Session不會立即把改變提交到數據庫，而是緩存到當前的session中，除非顯示調用session的flush方法，或關閉session.通過一級緩存可減少程序與數據庫的交互。</li>\n<li>SessionFactory的二級緩存是全局性的，所有session共享這個二級緩存，默認關閉。開啟時需要指定使用二級緩存的實體類，和二級緩存實現類，sessionFactory就會緩存訪問過該實體類的每個對象，直到緩存數據超出緩存空間。</li>\n<li>上面兩級緩存都是對整個實體進行緩存，查詢緩存可緩存普通屬性。將HQL或SQL語句及他們的查詢結果作為鍵值對進行緩存，對於同樣的查詢可以直接從緩存中獲取數據，默認關閉。</li>\n</ul>\n</li>\n<li><p>####MyBatis中使用#和$書寫佔位符的區別<br>‘#’將傳入的參數當成字符串，會自動加上引號；<br> $將參數直接顯示在生成的sql中，不安全，盡量不用<br>寫order by 時應該用$ </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><em>這部分主要涉及在做java web開發過程中涉及到的知識。</em></p>\n<p>###java web</p>\n<ol>\n<li><p>###XML文檔定義和解析有幾種形式？它們之間有何本質區別<br> 約束有DTD和Schema兩種形式，Schema本身也是xml文件，約束能力更強。<br> 解析xml主要有DOM，SAX,StAx(java6引入)。<br> 其中DOM在處理大型文件時性能下降厲害，因為DOM樹結構佔用的內存較多，解析前必須將整個文檔裝入內存，適合對xml的隨機訪問。<br> SAX是事件驅動型解析方式，順序讀取，遇見開頭、結束或開頭標籤結束標籤時會觸發一個事件，用戶通過回調代碼來處理xml文件。</p>\n</li>\n<li><p>####簡述jdbc操作數據庫的步驟<br>2.1 加載驅動  </p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tClass.forName(<span class=\"string\">\"oracle.jdbc.driver.OracleDriver\"</span>);</span><br><span class=\"line\">\t```  </span><br><span class=\"line\">  <span class=\"number\">2.2</span> 創建連接  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t```Connection con =　DriverManager.getConnection(<span class=\"string\">\"jdbc:oracle:thin@localhost:1521:orcl\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);```   </span><br><span class=\"line\">  <span class=\"number\">2.3</span> 創建語句</span><br><span class=\"line\">\t&lt;pre&gt;</span><br><span class=\"line\">\t PreparedStatement ps =con.prePareStatement(<span class=\"string\">\"select * from table_Name\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//設置參數的方式：ps.setInt(index,value);index從1開始</span></span><br><span class=\"line\">\t&lt;/pre&gt;   </span><br><span class=\"line\">  <span class=\"number\">2.4</span> 執行語句  </span><br><span class=\"line\"></span><br><span class=\"line\">\t```ResultSet rs =ps.executeQuery();```  </span><br><span class=\"line\">  <span class=\"number\">2.5</span> 處理結果  </span><br><span class=\"line\">\t&lt;pre&gt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t  <span class=\"comment\">//do something here </span></span><br><span class=\"line\">\t\t  System.out.println(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/pre&gt;</span><br><span class=\"line\">  <span class=\"number\">2.6</span> 關閉資源  </span><br><span class=\"line\"></span><br><span class=\"line\">\t提示：關閉外部資源的順序和打開的順序相反。  </span><br><span class=\"line\">  </span><br><span class=\"line\">3. ####Statement和PrepareStatement區別。</span><br><span class=\"line\">\t* 後者為預編譯，可增加安全性，且可帶參數。</span><br><span class=\"line\">\t* 當批量處理SQL或頻繁執行相同的查詢時，後者有明顯性能上的優勢，因為數據庫可將編譯優化后的SQL語句緩存起來。</span><br><span class=\"line\">\t* 調用存儲過程通過CallableStatement接口  </span><br><span class=\"line\">\t</span><br><span class=\"line\">4. ####使用JDBC時，如何提升讀取和更新數據的性能？  </span><br><span class=\"line\">\t* 讀取：rs.setFetchSize();指定每次抓取的記錄數。</span><br><span class=\"line\">\t* 更新：使用PrepareStatement構建批量處理。</span><br><span class=\"line\"></span><br><span class=\"line\">5. ####數據庫連接池的作用</span><br><span class=\"line\">\t減少性能開銷。</span><br><span class=\"line\">\t創建鏈接需要進行TCP的三次握手，釋放鏈接四次。</span><br><span class=\"line\">\t有關TCP握手，點擊[這裡(待補充)](http:<span class=\"comment\">//www.baidu.com)  </span></span><br><span class=\"line\">6. ####事物的ACID指什麼？  </span><br><span class=\"line\">\t* Atiomic:原子性。事物中每個操作，要麼全做要麼全不做。  </span><br><span class=\"line\">\t* Consistent:一致性。事物結束后系統狀態是一致的。</span><br><span class=\"line\">\t* Isolated:隔離性。并發執行的事物無法看見對方的中間狀態。</span><br><span class=\"line\">\t* Durable:持久性。事物完成后所做的改動都會被持久化。  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t補充幾個概念：</span><br><span class=\"line\">\t* 髒讀：A事物讀取B事物尚未提交的數據，若B進行回滾，則A讀到的數據就是臟數據。</span><br><span class=\"line\">\t* 不可重複讀：事物A重新讀取前面讀過的數據發現該數據已經被修改過了。</span><br><span class=\"line\">\t* 幻讀：事物A重新執行一個查詢，發現其中插入了被B提交的事物。</span><br><span class=\"line\">\t* 第<span class=\"number\">1</span>類丟失更新：事物A撤銷時，把已經提交事物B更新的數據覆蓋了。</span><br><span class=\"line\">\t* 第<span class=\"number\">2</span>類丟失更新：事物A覆蓋事物B已經提交的數據，造成事物B所做的操作丟失。</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t數據庫通過鎖機制來解決數據並發訪問問題，且提供自動鎖機制，只需要用戶指定會話的事物隔離級別。</span><br><span class=\"line\">\t  </span><br><span class=\"line\">7. ####JDBC能否處理Blod和Clob </span><br><span class=\"line\">\t能。補充：Blob為二進制大對象，Clob指大字符對象。  </span><br><span class=\"line\">8. ####獲得一個類的類對象有哪些方式</span><br><span class=\"line\">\t* String.class</span><br><span class=\"line\">\t* <span class=\"string\">\"hello\"</span>.getClass()</span><br><span class=\"line\">\t* Class.forName()</span><br><span class=\"line\">9. ####如何通過反射創建對象</span><br><span class=\"line\">\t* 通過類對象調用newInstance(),eg: ```String.class.getNewInstance();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通過類對象的getConstructor()或getDeclaredContructor()方法獲得構造器對象并調用其newInstance()方法創建對象，eg: <code>String.class.getConstructor(String.class).getNewInstance(&quot;hello&quot;);</code></li>\n</ul>\n</li>\n<li><p>簡述面向對象的六原則一法則</p>\n<ul>\n<li>單一職責原則：一個類只做它該做的事，不涉及其它無關領域。</li>\n<li>開閉原則：類應該對擴展開放，對修改關係。例如增加新功能時，只需要從原來系統派生出新類，而不需要修改原有代碼</li>\n<li>依賴倒轉原則：面向接口編程。</li>\n<li>里氏替換原則：簡單的說，就是能用父類型的地方就一定能使用子類型。</li>\n<li>接口隔離原則：接口要小而專，不能大而全。</li>\n<li>合成聚合原則： 優先使用聚合或合成關係複用代碼，例如工具類可以拿來直接用，不需要繼承。</li>\n<li>迪米特法則：又稱最少知識原則，一個對象應當對其它對象有可能少的了解。</li>\n</ul>\n</li>\n<li><p>####簡述你了解的的設計模式。<br>有關於23種設計模式，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩三個記住並可以寫出demo來。</p>\n</li>\n<li>####列舉一些java中常用的排序算法<br>有關於常用的排序算法，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩個記住並能寫出來。例如冒泡排序。</li>\n<li>####列舉一些java中常用的查找算法<br>有關於常用的查找算法，點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡(待補充)</a><br>挑常用的兩個記住並能寫出來。例如二分查找。 </li>\n<li>####實現會話跟蹤的技術有哪些 <ul>\n<li>url重寫：將唯一的繪畫ID添加到url結尾</li>\n<li>設置隱藏表單域：將繪話相關的字段添加到隱式表單域中，這些信息提交表單會提交給服務器。</li>\n<li>cookie:<ul>\n<li>基於瀏覽器窗口，關閉后沒有了</li>\n<li>生成臨時文件<br>注意事項：不要存放敏感信息，不能存放過多內容<br>*HttpSession:最強大，功能最多，當一個用戶第一次訪問某網站時會自動創建HttpSession,放在服務器內存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>####Hibernate的一級緩存、二級緩存和查詢緩存</p>\n<ul>\n<li>一級緩存功能默認有效。當程序保存、修改持久化實體時，Session不會立即把改變提交到數據庫，而是緩存到當前的session中，除非顯示調用session的flush方法，或關閉session.通過一級緩存可減少程序與數據庫的交互。</li>\n<li>SessionFactory的二級緩存是全局性的，所有session共享這個二級緩存，默認關閉。開啟時需要指定使用二級緩存的實體類，和二級緩存實現類，sessionFactory就會緩存訪問過該實體類的每個對象，直到緩存數據超出緩存空間。</li>\n<li>上面兩級緩存都是對整個實體進行緩存，查詢緩存可緩存普通屬性。將HQL或SQL語句及他們的查詢結果作為鍵值對進行緩存，對於同樣的查詢可以直接從緩存中獲取數據，默認關閉。</li>\n</ul>\n</li>\n<li><p>####MyBatis中使用#和$書寫佔位符的區別<br>‘#’將傳入的參數當成字符串，會自動加上引號；<br> $將參數直接顯示在生成的sql中，不安全，盡量不用<br>寫order by 時應該用$ </p>\n</li>\n</ol>\n"},{"title":"Test2","date":"2018-05-22T06:07:01.000Z","description":"中文測試","_content":"##MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n##MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n##有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(dev.hubo#gmail.com, 把#换成@)\n* QQ: 287759234\n* weibo: [@草依山](http://weibo.com/ihubo)\n* twitter: [@ihubo](http://twitter.com/ihubo)\n\n##捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n##感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)","source":"_posts/Test2.md","raw":"---\ntitle: Test2\ndate: 2018-05-22 14:07:01\ncategories: \"catTest\" #文章分類目錄 可以省略\ntags: #文章標籤 可以省略\n     - 标签1\n     - 标签2\ndescription: 中文測試\n---\n##MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n##MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n##有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(dev.hubo#gmail.com, 把#换成@)\n* QQ: 287759234\n* weibo: [@草依山](http://weibo.com/ihubo)\n* twitter: [@ihubo](http://twitter.com/ihubo)\n\n##捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n##感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)","slug":"Test2","published":1,"updated":"2018-05-22T08:49:38.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu7qk5c0003kwmkijn4ahjq","content":"<p>##MaHua是什么?<br>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<p>##MaHua有哪些功能？</p>\n<ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<p>##有问题反馈<br>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(dev.hubo#gmail.com, 把#换成@)</li>\n<li>QQ: 287759234</li>\n<li>weibo: <a href=\"http://weibo.com/ihubo\" target=\"_blank\" rel=\"noopener\">@草依山</a></li>\n<li>twitter: <a href=\"http://twitter.com/ihubo\" target=\"_blank\" rel=\"noopener\">@ihubo</a></li>\n</ul>\n<p>##捐助开发者<br>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<p>##感激<br>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\" target=\"_blank\" rel=\"noopener\">ace</a></li>\n<li><a href=\"http://jquery.com\" target=\"_blank\" rel=\"noopener\">jquery</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##MaHua是什么?<br>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<p>##MaHua有哪些功能？</p>\n<ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<p>##有问题反馈<br>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(dev.hubo#gmail.com, 把#换成@)</li>\n<li>QQ: 287759234</li>\n<li>weibo: <a href=\"http://weibo.com/ihubo\" target=\"_blank\" rel=\"noopener\">@草依山</a></li>\n<li>twitter: <a href=\"http://twitter.com/ihubo\" target=\"_blank\" rel=\"noopener\">@ihubo</a></li>\n</ul>\n<p>##捐助开发者<br>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<p>##感激<br>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\" target=\"_blank\" rel=\"noopener\">ace</a></li>\n<li><a href=\"http://jquery.com\" target=\"_blank\" rel=\"noopener\">jquery</a></li>\n</ul>\n"},{"title":"This is a test","date":"2018-05-22T06:07:01.000Z","description":"中文測試","_content":"##MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n##MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n##有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(dev.hubo#gmail.com, 把#换成@)\n* QQ: 287759234\n* weibo: [@草依山](http://weibo.com/ihubo)\n* twitter: [@ihubo](http://twitter.com/ihubo)\n\n##捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n##感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)","source":"_posts/This-is-a-test.md","raw":"---\ntitle: This is a test\ndate: 2018-05-22 14:07:01\ncategories: \"catTest\" #文章分類目錄 可以省略\ntags: #文章標籤 可以省略\n     - 标签1\n     - 标签2\ndescription: 中文測試\n---\n##MaHua是什么?\n一个在线编辑markdown文档的编辑器\n\n向Mac下优秀的markdown编辑器mou致敬\n\n##MaHua有哪些功能？\n\n* 方便的`导入导出`功能\n    *  直接把一个markdown的文本文件拖放到当前这个页面就可以了\n    *  导出为一个html格式的文件，样式一点也不会丢失\n* 编辑和预览`同步滚动`，所见即所得（右上角设置）\n* `VIM快捷键`支持，方便vim党们快速的操作 （右上角设置）\n* 强大的`自定义CSS`功能，方便定制自己的展示\n* 有数量也有质量的`主题`,编辑器和预览区域\n* 完美兼容`Github`的markdown语法\n* 预览区域`代码高亮`\n* 所有选项自动记忆\n\n##有问题反馈\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(dev.hubo#gmail.com, 把#换成@)\n* QQ: 287759234\n* weibo: [@草依山](http://weibo.com/ihubo)\n* twitter: [@ihubo](http://twitter.com/ihubo)\n\n##捐助开发者\n在兴趣的驱动下,写一个`免费`的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。\n当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。\n\n##感激\n感谢以下的项目,排名不分先后\n\n* [mou](http://mouapp.com/) \n* [ace](http://ace.ajax.org/)\n* [jquery](http://jquery.com)","slug":"This-is-a-test","published":1,"updated":"2018-05-22T08:49:44.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu7qk5e0005kwmkek5mvtcs","content":"<p>##MaHua是什么?<br>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<p>##MaHua有哪些功能？</p>\n<ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<p>##有问题反馈<br>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(dev.hubo#gmail.com, 把#换成@)</li>\n<li>QQ: 287759234</li>\n<li>weibo: <a href=\"http://weibo.com/ihubo\" target=\"_blank\" rel=\"noopener\">@草依山</a></li>\n<li>twitter: <a href=\"http://twitter.com/ihubo\" target=\"_blank\" rel=\"noopener\">@ihubo</a></li>\n</ul>\n<p>##捐助开发者<br>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<p>##感激<br>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\" target=\"_blank\" rel=\"noopener\">ace</a></li>\n<li><a href=\"http://jquery.com\" target=\"_blank\" rel=\"noopener\">jquery</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##MaHua是什么?<br>一个在线编辑markdown文档的编辑器</p>\n<p>向Mac下优秀的markdown编辑器mou致敬</p>\n<p>##MaHua有哪些功能？</p>\n<ul>\n<li>方便的<code>导入导出</code>功能<ul>\n<li>直接把一个markdown的文本文件拖放到当前这个页面就可以了</li>\n<li>导出为一个html格式的文件，样式一点也不会丢失</li>\n</ul>\n</li>\n<li>编辑和预览<code>同步滚动</code>，所见即所得（右上角设置）</li>\n<li><code>VIM快捷键</code>支持，方便vim党们快速的操作 （右上角设置）</li>\n<li>强大的<code>自定义CSS</code>功能，方便定制自己的展示</li>\n<li>有数量也有质量的<code>主题</code>,编辑器和预览区域</li>\n<li>完美兼容<code>Github</code>的markdown语法</li>\n<li>预览区域<code>代码高亮</code></li>\n<li>所有选项自动记忆</li>\n</ul>\n<p>##有问题反馈<br>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(dev.hubo#gmail.com, 把#换成@)</li>\n<li>QQ: 287759234</li>\n<li>weibo: <a href=\"http://weibo.com/ihubo\" target=\"_blank\" rel=\"noopener\">@草依山</a></li>\n<li>twitter: <a href=\"http://twitter.com/ihubo\" target=\"_blank\" rel=\"noopener\">@ihubo</a></li>\n</ul>\n<p>##捐助开发者<br>在兴趣的驱动下,写一个<code>免费</code>的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。<br>当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。</p>\n<p>##感激<br>感谢以下的项目,排名不分先后</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">mou</a> </li>\n<li><a href=\"http://ace.ajax.org/\" target=\"_blank\" rel=\"noopener\">ace</a></li>\n<li><a href=\"http://jquery.com\" target=\"_blank\" rel=\"noopener\">jquery</a></li>\n</ul>\n"},{"title":"push test","date":"2018-05-30T07:51:51.000Z","_content":"this is a  push test","source":"_posts/push-test.md","raw":"---\ntitle: push test\ndate: 2018-05-30 15:51:51\ntags: other\n---\nthis is a  push test","slug":"push-test","published":1,"updated":"2018-05-30T07:52:54.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu7qk5k0008kwmky4p2cc9o","content":"<p>this is a  push test</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this is a  push test</p>\n"},{"title":"java基礎","date":"2018-05-31T01:34:08.000Z","_content":"## java 基礎總結  \n \n1. ####面向對象的特征有哪些？\n   * 封裝 隱藏一切可隱藏的東西，只向外提供簡單的編程接口\n   * 繼承\n   * 多態：方法重載和重寫\n   * 抽象：只關注有哪些行為和屬性，不關注細節 \n\n2. ####public，private，protected以及default的區別？ \n  \n    * 橫坐標：當前類>>同包>>子類>>其它包  \n    \n\t* 縱坐標：public>>protected>>default>>private\n3. ####java的數據類型\n\t* 基本類型 \n\t\t* int,double,byte,boolean,long,float,short,char\n\t* 引用類型\n\t\t* eg:String\n\t* 枚舉類型（java 5以後）  \n\t \n4. ####java的自動拆箱與裝箱機制\n   \n \t其實就是基本數據類型與引用類型的自動轉換  \n\n5. ####IntegerCache的範圍  \n \n\t-128~127  \n\n6. ####&和&&的區別\n\t \n \t&是按位于；&&是邏輯與；按位與的作用通常作用是對某些位清零或保留某些位。  \n\t\n\n7. ####stack,heap和meathod area 的用法\n\t\n\t######首先明確堆和棧存放的東西是什麼。  \n\n\t* 棧：基本數據類型的變量，一個對象的引用，函數調用的現場保存\n\t* 堆：new 或構造器創建的對象，堆是垃圾收集器管理的主要區域\n\t* 方法區：方法區和堆都是各個線程共享的內存區域。用於存儲已經被jvm加載的類信息，常量，靜態變量登數據。字面量如\"hello\",100等是放在常量池中，jdk1.7以前常量池是方法區的一部分，1.7以後常量池在堆中。  \n\t\n\t######他們的特點是什麼？  \n\n\t  棧後進先出，空間小，操作起來速度快，大量的對象存在堆空間，他們的大小可通過jvm的啟動參數來調整，棧空間用光了，會引發StackOverflowError，而堆和常量池空間不足會引發OutofMemoryError \n\n8. ####java四捨五入的原理是什麼？ \n\n\t加0.5然後向下取整。  \n\n9. ####switch可以作用在哪些類型的變量上？  \n   \n\tjava5以前：byte,short,char,int.\n\tjava5:引入枚舉類型\n\tjava7:引入String類型  \n  \n10. ####==和equal的區別 \n  \n\t==看看左右是不是一個東西，equal是看左右是否長的一樣。\n    若x,y滿足x.equals(y)==true,則他們的hash code 一定相同，反過來不成立。  \n\t有關==和equals的更詳細總結，可參考[這裡](www.baidu.com)  \n\n11. ####java到底是值傳遞還是引用傳遞？  \n  \n\t值傳遞。首先明確值傳遞和引用傳遞的概念：  \n\n\t* 值傳遞：表示方法接收的是調用者提供的值\n\t* 引用傳遞：表示方法接收的是調用者提供的變量地址  \n\t  \n\t**方法得到是所有參數值得一個拷貝，方法不能修改任何傳遞給它的參數變量的內容**  \n  \n\t因此，在java中，  \n\t* 一個方法不能修改一個基本數據類型的參數（針對參數為基本數據類型）\n\t* 一個方法不能讓對象參數引用一個新對象（針對參數為引用類型）    \n\t \n\t下面的方法解釋為什麼java中不存在引用傳遞。   \n       \n\t<pre>\n\tEmployee a = new Employee(\"tom\",20);  \n\n\tEmployee b = new Employee(\"jack\",19);  \n \n\tpublic static void swap(Employee x,Employee y){    \n\t \tEmployee temp=x;  \n\t \tx=y;  \n\t\ty=temp;  \n\t}  \t \n\t</pre>  \n\t如果是引用傳遞，swap可以實現交換兩個對象值得效果，然而最終結果是swap并沒有改變存儲在a和b中的對象引用，x和y被初始化位兩個對象引用的拷貝。  \n  \n12. ####String、StringBuilder、StringBuffer的區別  \n   \n\tString只讀。其餘兩種可對字符串進行修改，StringBuilder（1.5引入）和StringBuffer完全相同，區別在於StringBuilder線程不安全，效率比StringBuffer高。\n  \n13. ####重載和重寫的區別\n\t重載發生在同一個類中，重寫發生在子類與父類之間，前者是編譯時多態性，（編譯時就知道要調用哪一個方法），後者是運行時多態性。\n14. ####JVM加載class文件的原理機制\n\t\n\t類的裝載有類加載器（ClassLoader)和它的子類實現。過程如下:  \n\t\n\t**加載**：把.class文件中的數據讀到內存中  \n  \n\t&nbsp;&nbsp;|  \n\t&nbsp;&nbsp;|    \n\n\t**連接**：（驗證、準備、解析）為靜態變量分配內存，并設置默認的初始值，將符號引用替換為直接引用。  \n\n\t&nbsp;&nbsp;|  \n\t&nbsp;&nbsp;|  \n\t  \n\t**初始化**：\n\t* 如果類存在直接的父類且這個父類還未初始化，則先初始化父類\n\t* 如果類中存在初始化語句則依次執行  \n\t \n15. ####如何實現對象的克隆\n\t此處列舉深度克隆的方式。\n\t<pre>\n\tpublic static <T extends Serializable> T clone(T obj) throws Exception(){\n\t  //將對象寫入流中\n\t  ByteOutputStream bout = new ByteArrayOutputStream();\n\t  ObjectOutputStream oos = new ObjectOutputStram(bout);\n\t  oos.write(obj);  \n\t  //從流中讀取對象\n\t  ByteInputStream bin = new ByteArrayInputStream(bout.toByteArray());\n\t  ObjectInputStream ois = new ObjectInputStream(bin);\n\t  return (T)ois.readObject();  \n\t}\n\t</pre>\n\t參考 [實現對象克隆的兩種方式](https://www.cnblogs.com/Qian123/p/5710533.html)\n  \n16. ####常見的異常分類\n\t關於Exception更多詳細信息點擊[這裡](http://www.baidu.com)  \n  \n17. ####闡述ArrayList、Vector、LinkedList的存儲性能和特性\n\t* ArrayList和Vector都是使用數組的方式來存儲數據，查詢速度快，插入數據慢。  \n\n\t* Vector的方法有synchronized 修飾，性能上比ArrayList差。  \n\t\n\t* LinkedList使用雙向鏈錶實現存儲。插入速度快。\n\t  \n\t* Vector,Hashtable,Dictionary,BitSet,Stack,Properties是遺留容器，不推薦使用。  \n\t  \n\t* ArrayList和LinkedList都是非線程安全的，可用Collections中synchronizedList方法變為線程安全的\n\t  \n18. ####Colledtion和Collections的區別\n\tCollection是Set,List登容器的父接口；Collections是一個工具類，提供靜態方法來輔助容器操作。\n  \n19. ####TreeMap和TreeSet在排序時如何比較元素？Collections工具類中的sort()方法如何比較元素？\n\t簡單記：  \n\t* 實現Comparable接口，重寫compareTo方法  \n\t  \n\t* 採用Collections中sort方法，如下 \n\n\t\t<pre>  \n\t\t//obj為要排序的對象，第二個參數為自定義的排序規則\n\t\tCollections.sort(obj,new Comparator<Object>(){  \n\t\t\tpublic int compare(Object o1,Object o2){  \n\t\t\t\treturn o1.hashCode()-o2.hashCode();\n\t\t\t}\n\t\t}  \n\t\t</pre>\t\n  \n20. ####Thread類的sleep()方法和對象的wait()方法都可以讓線程暫停執行，它們有什麼區別？\n\t它們的共同點是調用此方法會讓當前線程暫停執行制定的時間。\n\t* sleep方法是Thread類的靜態方法，但對象鎖依然保持。\n\t* wait()方法是Object類的方法，調用后會放棄當前對象的鎖，進入對象的等待池，只有調用對象的nodify()或notifYAll()才能喚醒等待池中的線程進入等鎖池，如果線程重新獲得對象的鎖就可以進入就緒狀態。\n  \n21. ####sleep方法和yield方法有什麼區別？\n  \n\t* sleep給其它線程運行時會不考慮線程優先級，會給底優先級線程以運行的機會，yield只能把機會給相同優先級或更高優先級的線程\n\t* 線程執行sleep后進入阻塞狀態，執行yield方法后進入就緒狀態\n\t* sleep方法需要拋出InterruptedException\n\t* sleep方法比yield（跟操作系統的cpu有關）具有更好的移植性  \n\t    \n22. ####請說出與線程同步以及線程調度相關的方法\n\t* wait():使一個線程處於阻塞狀態，並且釋放對象所持有的鎖；\n\t* sleep():讓線程進入睡眠狀態\n\t* notify():喚醒一個處於等待狀態的線程，但不能確切的喚醒某一個等待的線程，而是有JVM確定\n\t* notifyAll():喚醒所有處於等待狀態的線程，該方法並不是將對象的鎖給所有線程，而是讓他們去競爭，只有獲得鎖的線程才能進入就緒狀態。\n  \n23. ####編寫多線程有幾種實現方法\n\tjava5以前有兩種：\n\t* 繼承Thread類\n\t* 實現Runnable接口\n\t兩種方式都需要通過重寫run()方法來定義線程的行為，後者更加靈活\n  \tjava5以後還可以通過：實現Callable和ExecutorService等來創建（待補充）。\n\t\n24. ####什麼是線程池？\n\t“池化技術”產生的原因：盡可能的減少對象創建和銷毀的次數，從而減少資源的消耗。如線程池，數據庫連接池。\n\t線程池就是事先創建若干個可執行的線程放入一個容器中，需要的時候從池中獲取而不需要自行創建，使用完放回池中。\n\t線程工具類Executors提供一些靜態工廠方法，生成一些常用的線程池。\n\t* newSingleThreadExecutor：單線程線程池，該線程池保證所有任務的執行順序按照任務的提交順序執行。一個不行了另一個接著上。\n\t* newFixedThreadPool:創建固定大小的線程池，線程池大小一旦達到最大值就保持不變。\n\t* newCachedThreadPool:可緩存的線程池。當線程池大小超過處理任務所需線程數，則回收空閒線程，若不夠用，則新建線程來補充\t，最終線程池大小取決於jvm能夠創建的最大線程數\n\t* newScheduledThreadPool:創建一個大小無線的線程池。該線程池支持定時以及週期性執行任務的需求。     \n\n25. ####線程的基本狀態以及狀態之間的關係  \n\t![](https://coding.net/u/sukianata/p/ImgRepository/git/raw/master/java/Thread.png)\t\n\t說明：  \n\t<pre>\n\t\t Blocked in Object's Wait Pool  對象等待池  \n\t\t Blocked in Object's Lock Pool\t等鎖池  \n\t \t Runnable                       就緒狀態  \n\t\t Running                        運行狀態\n\t\t Blocked                        阻塞狀態\n\t</pre>  \n26. ####synchronized和java.util.concurrent.locks.Lock的異同  \n\tLock能完成synchronized所實現的所有功能。主要不同點：Lock有比synchronized更精確的線程語義和更好的性能，而且不強制性的要求一定要獲得鎖。synchronized會自動釋放鎖，而Lock一定要求程序員手工釋放。\n  \n27. java中有幾種類型的流\n\t字節流和字符流。字節流繼承于InputStream,OutputStream,字符流繼承與Reader,Writer。\n\t編程實現文件拷貝，此處列出NIO的形式。\n\t<pre>\n\tpublic static void fileCopyNIO(String soure,String target) throws IOException{\n\t  try(FileInputStram in =new FileInputStream(source)){\n\t\ttry(FileOutputStream out = new FileOutputStream(target)){\n\t\t\tFileChannel inChannel = in.getChannel();\n\t\t\tFileChannel outChannel =out.getChannel();\n\t\t\tByteBuffer buffer = ByteBuffer.allocate(4096);\n\t\t\twhile(inChannel.read(buffer) !=-1){\n\t\t\t\tbuffer.flip();\n\t\t\t\toutChannel.write(buffer);\t\n\t\t\t\tbuffer.clear();\n\t\t\t}\n\t\t }\n\t  }\n\t}\n\t</pre>\n\t此處用到了java7的新特性try...with..resource格式。\n","source":"_posts/java基礎.md","raw":"---\ntitle: java基礎\ndate: 2018-05-31 09:34:08\ntags: java\n---\n## java 基礎總結  \n \n1. ####面向對象的特征有哪些？\n   * 封裝 隱藏一切可隱藏的東西，只向外提供簡單的編程接口\n   * 繼承\n   * 多態：方法重載和重寫\n   * 抽象：只關注有哪些行為和屬性，不關注細節 \n\n2. ####public，private，protected以及default的區別？ \n  \n    * 橫坐標：當前類>>同包>>子類>>其它包  \n    \n\t* 縱坐標：public>>protected>>default>>private\n3. ####java的數據類型\n\t* 基本類型 \n\t\t* int,double,byte,boolean,long,float,short,char\n\t* 引用類型\n\t\t* eg:String\n\t* 枚舉類型（java 5以後）  \n\t \n4. ####java的自動拆箱與裝箱機制\n   \n \t其實就是基本數據類型與引用類型的自動轉換  \n\n5. ####IntegerCache的範圍  \n \n\t-128~127  \n\n6. ####&和&&的區別\n\t \n \t&是按位于；&&是邏輯與；按位與的作用通常作用是對某些位清零或保留某些位。  \n\t\n\n7. ####stack,heap和meathod area 的用法\n\t\n\t######首先明確堆和棧存放的東西是什麼。  \n\n\t* 棧：基本數據類型的變量，一個對象的引用，函數調用的現場保存\n\t* 堆：new 或構造器創建的對象，堆是垃圾收集器管理的主要區域\n\t* 方法區：方法區和堆都是各個線程共享的內存區域。用於存儲已經被jvm加載的類信息，常量，靜態變量登數據。字面量如\"hello\",100等是放在常量池中，jdk1.7以前常量池是方法區的一部分，1.7以後常量池在堆中。  \n\t\n\t######他們的特點是什麼？  \n\n\t  棧後進先出，空間小，操作起來速度快，大量的對象存在堆空間，他們的大小可通過jvm的啟動參數來調整，棧空間用光了，會引發StackOverflowError，而堆和常量池空間不足會引發OutofMemoryError \n\n8. ####java四捨五入的原理是什麼？ \n\n\t加0.5然後向下取整。  \n\n9. ####switch可以作用在哪些類型的變量上？  \n   \n\tjava5以前：byte,short,char,int.\n\tjava5:引入枚舉類型\n\tjava7:引入String類型  \n  \n10. ####==和equal的區別 \n  \n\t==看看左右是不是一個東西，equal是看左右是否長的一樣。\n    若x,y滿足x.equals(y)==true,則他們的hash code 一定相同，反過來不成立。  \n\t有關==和equals的更詳細總結，可參考[這裡](www.baidu.com)  \n\n11. ####java到底是值傳遞還是引用傳遞？  \n  \n\t值傳遞。首先明確值傳遞和引用傳遞的概念：  \n\n\t* 值傳遞：表示方法接收的是調用者提供的值\n\t* 引用傳遞：表示方法接收的是調用者提供的變量地址  \n\t  \n\t**方法得到是所有參數值得一個拷貝，方法不能修改任何傳遞給它的參數變量的內容**  \n  \n\t因此，在java中，  \n\t* 一個方法不能修改一個基本數據類型的參數（針對參數為基本數據類型）\n\t* 一個方法不能讓對象參數引用一個新對象（針對參數為引用類型）    \n\t \n\t下面的方法解釋為什麼java中不存在引用傳遞。   \n       \n\t<pre>\n\tEmployee a = new Employee(\"tom\",20);  \n\n\tEmployee b = new Employee(\"jack\",19);  \n \n\tpublic static void swap(Employee x,Employee y){    \n\t \tEmployee temp=x;  \n\t \tx=y;  \n\t\ty=temp;  \n\t}  \t \n\t</pre>  \n\t如果是引用傳遞，swap可以實現交換兩個對象值得效果，然而最終結果是swap并沒有改變存儲在a和b中的對象引用，x和y被初始化位兩個對象引用的拷貝。  \n  \n12. ####String、StringBuilder、StringBuffer的區別  \n   \n\tString只讀。其餘兩種可對字符串進行修改，StringBuilder（1.5引入）和StringBuffer完全相同，區別在於StringBuilder線程不安全，效率比StringBuffer高。\n  \n13. ####重載和重寫的區別\n\t重載發生在同一個類中，重寫發生在子類與父類之間，前者是編譯時多態性，（編譯時就知道要調用哪一個方法），後者是運行時多態性。\n14. ####JVM加載class文件的原理機制\n\t\n\t類的裝載有類加載器（ClassLoader)和它的子類實現。過程如下:  \n\t\n\t**加載**：把.class文件中的數據讀到內存中  \n  \n\t&nbsp;&nbsp;|  \n\t&nbsp;&nbsp;|    \n\n\t**連接**：（驗證、準備、解析）為靜態變量分配內存，并設置默認的初始值，將符號引用替換為直接引用。  \n\n\t&nbsp;&nbsp;|  \n\t&nbsp;&nbsp;|  \n\t  \n\t**初始化**：\n\t* 如果類存在直接的父類且這個父類還未初始化，則先初始化父類\n\t* 如果類中存在初始化語句則依次執行  \n\t \n15. ####如何實現對象的克隆\n\t此處列舉深度克隆的方式。\n\t<pre>\n\tpublic static <T extends Serializable> T clone(T obj) throws Exception(){\n\t  //將對象寫入流中\n\t  ByteOutputStream bout = new ByteArrayOutputStream();\n\t  ObjectOutputStream oos = new ObjectOutputStram(bout);\n\t  oos.write(obj);  \n\t  //從流中讀取對象\n\t  ByteInputStream bin = new ByteArrayInputStream(bout.toByteArray());\n\t  ObjectInputStream ois = new ObjectInputStream(bin);\n\t  return (T)ois.readObject();  \n\t}\n\t</pre>\n\t參考 [實現對象克隆的兩種方式](https://www.cnblogs.com/Qian123/p/5710533.html)\n  \n16. ####常見的異常分類\n\t關於Exception更多詳細信息點擊[這裡](http://www.baidu.com)  \n  \n17. ####闡述ArrayList、Vector、LinkedList的存儲性能和特性\n\t* ArrayList和Vector都是使用數組的方式來存儲數據，查詢速度快，插入數據慢。  \n\n\t* Vector的方法有synchronized 修飾，性能上比ArrayList差。  \n\t\n\t* LinkedList使用雙向鏈錶實現存儲。插入速度快。\n\t  \n\t* Vector,Hashtable,Dictionary,BitSet,Stack,Properties是遺留容器，不推薦使用。  \n\t  \n\t* ArrayList和LinkedList都是非線程安全的，可用Collections中synchronizedList方法變為線程安全的\n\t  \n18. ####Colledtion和Collections的區別\n\tCollection是Set,List登容器的父接口；Collections是一個工具類，提供靜態方法來輔助容器操作。\n  \n19. ####TreeMap和TreeSet在排序時如何比較元素？Collections工具類中的sort()方法如何比較元素？\n\t簡單記：  \n\t* 實現Comparable接口，重寫compareTo方法  \n\t  \n\t* 採用Collections中sort方法，如下 \n\n\t\t<pre>  \n\t\t//obj為要排序的對象，第二個參數為自定義的排序規則\n\t\tCollections.sort(obj,new Comparator<Object>(){  \n\t\t\tpublic int compare(Object o1,Object o2){  \n\t\t\t\treturn o1.hashCode()-o2.hashCode();\n\t\t\t}\n\t\t}  \n\t\t</pre>\t\n  \n20. ####Thread類的sleep()方法和對象的wait()方法都可以讓線程暫停執行，它們有什麼區別？\n\t它們的共同點是調用此方法會讓當前線程暫停執行制定的時間。\n\t* sleep方法是Thread類的靜態方法，但對象鎖依然保持。\n\t* wait()方法是Object類的方法，調用后會放棄當前對象的鎖，進入對象的等待池，只有調用對象的nodify()或notifYAll()才能喚醒等待池中的線程進入等鎖池，如果線程重新獲得對象的鎖就可以進入就緒狀態。\n  \n21. ####sleep方法和yield方法有什麼區別？\n  \n\t* sleep給其它線程運行時會不考慮線程優先級，會給底優先級線程以運行的機會，yield只能把機會給相同優先級或更高優先級的線程\n\t* 線程執行sleep后進入阻塞狀態，執行yield方法后進入就緒狀態\n\t* sleep方法需要拋出InterruptedException\n\t* sleep方法比yield（跟操作系統的cpu有關）具有更好的移植性  \n\t    \n22. ####請說出與線程同步以及線程調度相關的方法\n\t* wait():使一個線程處於阻塞狀態，並且釋放對象所持有的鎖；\n\t* sleep():讓線程進入睡眠狀態\n\t* notify():喚醒一個處於等待狀態的線程，但不能確切的喚醒某一個等待的線程，而是有JVM確定\n\t* notifyAll():喚醒所有處於等待狀態的線程，該方法並不是將對象的鎖給所有線程，而是讓他們去競爭，只有獲得鎖的線程才能進入就緒狀態。\n  \n23. ####編寫多線程有幾種實現方法\n\tjava5以前有兩種：\n\t* 繼承Thread類\n\t* 實現Runnable接口\n\t兩種方式都需要通過重寫run()方法來定義線程的行為，後者更加靈活\n  \tjava5以後還可以通過：實現Callable和ExecutorService等來創建（待補充）。\n\t\n24. ####什麼是線程池？\n\t“池化技術”產生的原因：盡可能的減少對象創建和銷毀的次數，從而減少資源的消耗。如線程池，數據庫連接池。\n\t線程池就是事先創建若干個可執行的線程放入一個容器中，需要的時候從池中獲取而不需要自行創建，使用完放回池中。\n\t線程工具類Executors提供一些靜態工廠方法，生成一些常用的線程池。\n\t* newSingleThreadExecutor：單線程線程池，該線程池保證所有任務的執行順序按照任務的提交順序執行。一個不行了另一個接著上。\n\t* newFixedThreadPool:創建固定大小的線程池，線程池大小一旦達到最大值就保持不變。\n\t* newCachedThreadPool:可緩存的線程池。當線程池大小超過處理任務所需線程數，則回收空閒線程，若不夠用，則新建線程來補充\t，最終線程池大小取決於jvm能夠創建的最大線程數\n\t* newScheduledThreadPool:創建一個大小無線的線程池。該線程池支持定時以及週期性執行任務的需求。     \n\n25. ####線程的基本狀態以及狀態之間的關係  \n\t![](https://coding.net/u/sukianata/p/ImgRepository/git/raw/master/java/Thread.png)\t\n\t說明：  \n\t<pre>\n\t\t Blocked in Object's Wait Pool  對象等待池  \n\t\t Blocked in Object's Lock Pool\t等鎖池  \n\t \t Runnable                       就緒狀態  \n\t\t Running                        運行狀態\n\t\t Blocked                        阻塞狀態\n\t</pre>  \n26. ####synchronized和java.util.concurrent.locks.Lock的異同  \n\tLock能完成synchronized所實現的所有功能。主要不同點：Lock有比synchronized更精確的線程語義和更好的性能，而且不強制性的要求一定要獲得鎖。synchronized會自動釋放鎖，而Lock一定要求程序員手工釋放。\n  \n27. java中有幾種類型的流\n\t字節流和字符流。字節流繼承于InputStream,OutputStream,字符流繼承與Reader,Writer。\n\t編程實現文件拷貝，此處列出NIO的形式。\n\t<pre>\n\tpublic static void fileCopyNIO(String soure,String target) throws IOException{\n\t  try(FileInputStram in =new FileInputStream(source)){\n\t\ttry(FileOutputStream out = new FileOutputStream(target)){\n\t\t\tFileChannel inChannel = in.getChannel();\n\t\t\tFileChannel outChannel =out.getChannel();\n\t\t\tByteBuffer buffer = ByteBuffer.allocate(4096);\n\t\t\twhile(inChannel.read(buffer) !=-1){\n\t\t\t\tbuffer.flip();\n\t\t\t\toutChannel.write(buffer);\t\n\t\t\t\tbuffer.clear();\n\t\t\t}\n\t\t }\n\t  }\n\t}\n\t</pre>\n\t此處用到了java7的新特性try...with..resource格式。\n","slug":"java基礎","published":1,"updated":"2018-05-31T01:35:01.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu7qk5l0009kwmkiycyg1go","content":"<h2 id=\"java-基礎總結\"><a href=\"#java-基礎總結\" class=\"headerlink\" title=\"java 基礎總結\"></a>java 基礎總結</h2><ol>\n<li><p>####面向對象的特征有哪些？</p>\n<ul>\n<li>封裝 隱藏一切可隱藏的東西，只向外提供簡單的編程接口</li>\n<li>繼承</li>\n<li>多態：方法重載和重寫</li>\n<li>抽象：只關注有哪些行為和屬性，不關注細節 </li>\n</ul>\n</li>\n<li><p>####public，private，protected以及default的區別？ </p>\n<ul>\n<li><p>橫坐標：當前類&gt;&gt;同包&gt;&gt;子類&gt;&gt;其它包  </p>\n</li>\n<li><p>縱坐標：public&gt;&gt;protected&gt;&gt;default&gt;&gt;private</p>\n</li>\n</ul>\n</li>\n<li><p>####java的數據類型</p>\n<ul>\n<li>基本類型 <ul>\n<li>int,double,byte,boolean,long,float,short,char</li>\n</ul>\n</li>\n<li>引用類型<ul>\n<li>eg:String</li>\n</ul>\n</li>\n<li>枚舉類型（java 5以後）  </li>\n</ul>\n</li>\n<li><p>####java的自動拆箱與裝箱機制</p>\n<p>  其實就是基本數據類型與引用類型的自動轉換  </p>\n</li>\n<li><p>####IntegerCache的範圍  </p>\n<p> -128~127  </p>\n</li>\n<li><p>####&amp;和&amp;&amp;的區別</p>\n<p>  &amp;是按位于；&amp;&amp;是邏輯與；按位與的作用通常作用是對某些位清零或保留某些位。  </p>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>####stack,heap和meathod area 的用法</p>\n<p> ######首先明確堆和棧存放的東西是什麼。  </p>\n<ul>\n<li>棧：基本數據類型的變量，一個對象的引用，函數調用的現場保存</li>\n<li>堆：new 或構造器創建的對象，堆是垃圾收集器管理的主要區域</li>\n<li><p>方法區：方法區和堆都是各個線程共享的內存區域。用於存儲已經被jvm加載的類信息，常量，靜態變量登數據。字面量如”hello”,100等是放在常量池中，jdk1.7以前常量池是方法區的一部分，1.7以後常量池在堆中。  </p>\n<p>######他們的特點是什麼？  </p>\n<p>棧後進先出，空間小，操作起來速度快，大量的對象存在堆空間，他們的大小可通過jvm的啟動參數來調整，棧空間用光了，會引發StackOverflowError，而堆和常量池空間不足會引發OutofMemoryError </p>\n</li>\n</ul>\n</li>\n<li><p>####java四捨五入的原理是什麼？ </p>\n<p> 加0.5然後向下取整。  </p>\n</li>\n<li><p>####switch可以作用在哪些類型的變量上？  </p>\n<p> java5以前：byte,short,char,int.<br> java5:引入枚舉類型<br> java7:引入String類型  </p>\n</li>\n<li><p>####==和equal的區別 </p>\n<p>==看看左右是不是一個東西，equal是看左右是否長的一樣。<br>若x,y滿足x.equals(y)==true,則他們的hash code 一定相同，反過來不成立。<br>有關==和equals的更詳細總結，可參考<a href=\"www.baidu.com\">這裡</a>  </p>\n</li>\n<li><p>####java到底是值傳遞還是引用傳遞？  </p>\n<p>值傳遞。首先明確值傳遞和引用傳遞的概念：  </p>\n<ul>\n<li>值傳遞：表示方法接收的是調用者提供的值</li>\n<li>引用傳遞：表示方法接收的是調用者提供的變量地址  </li>\n</ul>\n<p><strong>方法得到是所有參數值得一個拷貝，方法不能修改任何傳遞給它的參數變量的內容</strong>  </p>\n<p>因此，在java中，  </p>\n<ul>\n<li>一個方法不能修改一個基本數據類型的參數（針對參數為基本數據類型）</li>\n<li>一個方法不能讓對象參數引用一個新對象（針對參數為引用類型）    </li>\n</ul>\n<p>下面的方法解釋為什麼java中不存在引用傳遞。   </p>\n<p><pre><br>Employee a = new Employee(“tom”,20);  </pre></p>\n<p>Employee b = new Employee(“jack”,19);  </p>\n<p>public static void swap(Employee x,Employee y){    </p>\n<pre><code> Employee temp=x;  \n x=y;  \ny=temp;  \n</code></pre><p>}<br><br>如果是引用傳遞，swap可以實現交換兩個對象值得效果，然而最終結果是swap并沒有改變存儲在a和b中的對象引用，x和y被初始化位兩個對象引用的拷貝。  </p>\n</li>\n<li><p>####String、StringBuilder、StringBuffer的區別  </p>\n<p>String只讀。其餘兩種可對字符串進行修改，StringBuilder（1.5引入）和StringBuffer完全相同，區別在於StringBuilder線程不安全，效率比StringBuffer高。</p>\n</li>\n<li><p>####重載和重寫的區別<br>重載發生在同一個類中，重寫發生在子類與父類之間，前者是編譯時多態性，（編譯時就知道要調用哪一個方法），後者是運行時多態性。</p>\n</li>\n<li><p>####JVM加載class文件的原理機制</p>\n<p>類的裝載有類加載器（ClassLoader)和它的子類實現。過程如下:  </p>\n<p><strong>加載</strong>：把.class文件中的數據讀到內存中  </p>\n<p>&nbsp;&nbsp;|<br>&nbsp;&nbsp;|    </p>\n<p><strong>連接</strong>：（驗證、準備、解析）為靜態變量分配內存，并設置默認的初始值，將符號引用替換為直接引用。  </p>\n<p>&nbsp;&nbsp;|<br>&nbsp;&nbsp;|  </p>\n<p><strong>初始化</strong>：</p>\n<ul>\n<li>如果類存在直接的父類且這個父類還未初始化，則先初始化父類</li>\n<li>如果類中存在初始化語句則依次執行  </li>\n</ul>\n</li>\n<li><p>####如何實現對象的克隆<br>此處列舉深度克隆的方式。<br><pre><br>public static <t extends=\"\" serializable=\"\"> T clone(T obj) throws Exception(){<br>  //將對象寫入流中<br>  ByteOutputStream bout = new ByteArrayOutputStream();<br>  ObjectOutputStream oos = new ObjectOutputStram(bout);<br>  oos.write(obj);<br>  //從流中讀取對象<br>  ByteInputStream bin = new ByteArrayInputStream(bout.toByteArray());<br>  ObjectInputStream ois = new ObjectInputStream(bin);<br>  return (T)ois.readObject();<br>}<br></t></pre><br>參考 <a href=\"https://www.cnblogs.com/Qian123/p/5710533.html\" target=\"_blank\" rel=\"noopener\">實現對象克隆的兩種方式</a></p>\n</li>\n<li><p>####常見的異常分類<br>關於Exception更多詳細信息點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡</a>  </p>\n</li>\n<li><p>####闡述ArrayList、Vector、LinkedList的存儲性能和特性</p>\n<ul>\n<li><p>ArrayList和Vector都是使用數組的方式來存儲數據，查詢速度快，插入數據慢。  </p>\n</li>\n<li><p>Vector的方法有synchronized 修飾，性能上比ArrayList差。  </p>\n</li>\n<li><p>LinkedList使用雙向鏈錶實現存儲。插入速度快。</p>\n</li>\n<li><p>Vector,Hashtable,Dictionary,BitSet,Stack,Properties是遺留容器，不推薦使用。  </p>\n</li>\n<li><p>ArrayList和LinkedList都是非線程安全的，可用Collections中synchronizedList方法變為線程安全的</p>\n</li>\n</ul>\n</li>\n<li><p>####Colledtion和Collections的區別<br>Collection是Set,List登容器的父接口；Collections是一個工具類，提供靜態方法來輔助容器操作。</p>\n</li>\n<li><p>####TreeMap和TreeSet在排序時如何比較元素？Collections工具類中的sort()方法如何比較元素？<br>簡單記：  </p>\n<ul>\n<li><p>實現Comparable接口，重寫compareTo方法  </p>\n</li>\n<li><p>採用Collections中sort方法，如下 </p>\n  <pre>  \n  //obj為要排序的對象，第二個參數為自定義的排序規則\n  Collections.sort(obj,new Comparator<object>(){  \n      public int compare(Object o1,Object o2){  \n          return o1.hashCode()-o2.hashCode();\n      }\n  }  \n  </object></pre>    \n</li>\n</ul>\n</li>\n<li><p>####Thread類的sleep()方法和對象的wait()方法都可以讓線程暫停執行，它們有什麼區別？<br>它們的共同點是調用此方法會讓當前線程暫停執行制定的時間。</p>\n<ul>\n<li>sleep方法是Thread類的靜態方法，但對象鎖依然保持。</li>\n<li>wait()方法是Object類的方法，調用后會放棄當前對象的鎖，進入對象的等待池，只有調用對象的nodify()或notifYAll()才能喚醒等待池中的線程進入等鎖池，如果線程重新獲得對象的鎖就可以進入就緒狀態。</li>\n</ul>\n</li>\n<li><p>####sleep方法和yield方法有什麼區別？</p>\n<ul>\n<li>sleep給其它線程運行時會不考慮線程優先級，會給底優先級線程以運行的機會，yield只能把機會給相同優先級或更高優先級的線程</li>\n<li>線程執行sleep后進入阻塞狀態，執行yield方法后進入就緒狀態</li>\n<li>sleep方法需要拋出InterruptedException</li>\n<li>sleep方法比yield（跟操作系統的cpu有關）具有更好的移植性  </li>\n</ul>\n</li>\n<li><p>####請說出與線程同步以及線程調度相關的方法</p>\n<ul>\n<li>wait():使一個線程處於阻塞狀態，並且釋放對象所持有的鎖；</li>\n<li>sleep():讓線程進入睡眠狀態</li>\n<li>notify():喚醒一個處於等待狀態的線程，但不能確切的喚醒某一個等待的線程，而是有JVM確定</li>\n<li>notifyAll():喚醒所有處於等待狀態的線程，該方法並不是將對象的鎖給所有線程，而是讓他們去競爭，只有獲得鎖的線程才能進入就緒狀態。</li>\n</ul>\n</li>\n<li><p>####編寫多線程有幾種實現方法<br>java5以前有兩種：</p>\n<ul>\n<li>繼承Thread類</li>\n<li>實現Runnable接口<br>兩種方式都需要通過重寫run()方法來定義線程的行為，後者更加靈活<br>java5以後還可以通過：實現Callable和ExecutorService等來創建（待補充）。</li>\n</ul>\n</li>\n<li><p>####什麼是線程池？<br>“池化技術”產生的原因：盡可能的減少對象創建和銷毀的次數，從而減少資源的消耗。如線程池，數據庫連接池。<br>線程池就是事先創建若干個可執行的線程放入一個容器中，需要的時候從池中獲取而不需要自行創建，使用完放回池中。<br>線程工具類Executors提供一些靜態工廠方法，生成一些常用的線程池。</p>\n<ul>\n<li>newSingleThreadExecutor：單線程線程池，該線程池保證所有任務的執行順序按照任務的提交順序執行。一個不行了另一個接著上。</li>\n<li>newFixedThreadPool:創建固定大小的線程池，線程池大小一旦達到最大值就保持不變。</li>\n<li>newCachedThreadPool:可緩存的線程池。當線程池大小超過處理任務所需線程數，則回收空閒線程，若不夠用，則新建線程來補充    ，最終線程池大小取決於jvm能夠創建的最大線程數</li>\n<li>newScheduledThreadPool:創建一個大小無線的線程池。該線程池支持定時以及週期性執行任務的需求。     </li>\n</ul>\n</li>\n<li><p>####線程的基本狀態以及狀態之間的關係<br><img src=\"https://coding.net/u/sukianata/p/ImgRepository/git/raw/master/java/Thread.png\" alt=\"\"><br>說明：  </p>\n<pre>\n     Blocked in Object's Wait Pool  對象等待池  \n     Blocked in Object's Lock Pool    等鎖池  \n      Runnable                       就緒狀態  \n     Running                        運行狀態\n     Blocked                        阻塞狀態\n</pre>  </li>\n<li><p>####synchronized和java.util.concurrent.locks.Lock的異同<br>Lock能完成synchronized所實現的所有功能。主要不同點：Lock有比synchronized更精確的線程語義和更好的性能，而且不強制性的要求一定要獲得鎖。synchronized會自動釋放鎖，而Lock一定要求程序員手工釋放。</p>\n</li>\n<li><p>java中有幾種類型的流<br>字節流和字符流。字節流繼承于InputStream,OutputStream,字符流繼承與Reader,Writer。<br>編程實現文件拷貝，此處列出NIO的形式。<br><pre><br>public static void fileCopyNIO(String soure,String target) throws IOException{<br>  try(FileInputStram in =new FileInputStream(source)){</pre></p>\n<pre><code>try(FileOutputStream out = new FileOutputStream(target)){\n    FileChannel inChannel = in.getChannel();\n    FileChannel outChannel =out.getChannel();\n    ByteBuffer buffer = ByteBuffer.allocate(4096);\n    while(inChannel.read(buffer) !=-1){\n        buffer.flip();\n        outChannel.write(buffer);    \n        buffer.clear();\n    }\n }\n</code></pre><p>  }<br>}<br><br>此處用到了java7的新特性try…with..resource格式。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java-基礎總結\"><a href=\"#java-基礎總結\" class=\"headerlink\" title=\"java 基礎總結\"></a>java 基礎總結</h2><ol>\n<li><p>####面向對象的特征有哪些？</p>\n<ul>\n<li>封裝 隱藏一切可隱藏的東西，只向外提供簡單的編程接口</li>\n<li>繼承</li>\n<li>多態：方法重載和重寫</li>\n<li>抽象：只關注有哪些行為和屬性，不關注細節 </li>\n</ul>\n</li>\n<li><p>####public，private，protected以及default的區別？ </p>\n<ul>\n<li><p>橫坐標：當前類&gt;&gt;同包&gt;&gt;子類&gt;&gt;其它包  </p>\n</li>\n<li><p>縱坐標：public&gt;&gt;protected&gt;&gt;default&gt;&gt;private</p>\n</li>\n</ul>\n</li>\n<li><p>####java的數據類型</p>\n<ul>\n<li>基本類型 <ul>\n<li>int,double,byte,boolean,long,float,short,char</li>\n</ul>\n</li>\n<li>引用類型<ul>\n<li>eg:String</li>\n</ul>\n</li>\n<li>枚舉類型（java 5以後）  </li>\n</ul>\n</li>\n<li><p>####java的自動拆箱與裝箱機制</p>\n<p>  其實就是基本數據類型與引用類型的自動轉換  </p>\n</li>\n<li><p>####IntegerCache的範圍  </p>\n<p> -128~127  </p>\n</li>\n<li><p>####&amp;和&amp;&amp;的區別</p>\n<p>  &amp;是按位于；&amp;&amp;是邏輯與；按位與的作用通常作用是對某些位清零或保留某些位。  </p>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>####stack,heap和meathod area 的用法</p>\n<p> ######首先明確堆和棧存放的東西是什麼。  </p>\n<ul>\n<li>棧：基本數據類型的變量，一個對象的引用，函數調用的現場保存</li>\n<li>堆：new 或構造器創建的對象，堆是垃圾收集器管理的主要區域</li>\n<li><p>方法區：方法區和堆都是各個線程共享的內存區域。用於存儲已經被jvm加載的類信息，常量，靜態變量登數據。字面量如”hello”,100等是放在常量池中，jdk1.7以前常量池是方法區的一部分，1.7以後常量池在堆中。  </p>\n<p>######他們的特點是什麼？  </p>\n<p>棧後進先出，空間小，操作起來速度快，大量的對象存在堆空間，他們的大小可通過jvm的啟動參數來調整，棧空間用光了，會引發StackOverflowError，而堆和常量池空間不足會引發OutofMemoryError </p>\n</li>\n</ul>\n</li>\n<li><p>####java四捨五入的原理是什麼？ </p>\n<p> 加0.5然後向下取整。  </p>\n</li>\n<li><p>####switch可以作用在哪些類型的變量上？  </p>\n<p> java5以前：byte,short,char,int.<br> java5:引入枚舉類型<br> java7:引入String類型  </p>\n</li>\n<li><p>####==和equal的區別 </p>\n<p>==看看左右是不是一個東西，equal是看左右是否長的一樣。<br>若x,y滿足x.equals(y)==true,則他們的hash code 一定相同，反過來不成立。<br>有關==和equals的更詳細總結，可參考<a href=\"www.baidu.com\">這裡</a>  </p>\n</li>\n<li><p>####java到底是值傳遞還是引用傳遞？  </p>\n<p>值傳遞。首先明確值傳遞和引用傳遞的概念：  </p>\n<ul>\n<li>值傳遞：表示方法接收的是調用者提供的值</li>\n<li>引用傳遞：表示方法接收的是調用者提供的變量地址  </li>\n</ul>\n<p><strong>方法得到是所有參數值得一個拷貝，方法不能修改任何傳遞給它的參數變量的內容</strong>  </p>\n<p>因此，在java中，  </p>\n<ul>\n<li>一個方法不能修改一個基本數據類型的參數（針對參數為基本數據類型）</li>\n<li>一個方法不能讓對象參數引用一個新對象（針對參數為引用類型）    </li>\n</ul>\n<p>下面的方法解釋為什麼java中不存在引用傳遞。   </p>\n<p><pre><br>Employee a = new Employee(“tom”,20);  </pre></p>\n<p>Employee b = new Employee(“jack”,19);  </p>\n<p>public static void swap(Employee x,Employee y){    </p>\n<pre><code> Employee temp=x;  \n x=y;  \ny=temp;  \n</code></pre><p>}<br><br>如果是引用傳遞，swap可以實現交換兩個對象值得效果，然而最終結果是swap并沒有改變存儲在a和b中的對象引用，x和y被初始化位兩個對象引用的拷貝。  </p>\n</li>\n<li><p>####String、StringBuilder、StringBuffer的區別  </p>\n<p>String只讀。其餘兩種可對字符串進行修改，StringBuilder（1.5引入）和StringBuffer完全相同，區別在於StringBuilder線程不安全，效率比StringBuffer高。</p>\n</li>\n<li><p>####重載和重寫的區別<br>重載發生在同一個類中，重寫發生在子類與父類之間，前者是編譯時多態性，（編譯時就知道要調用哪一個方法），後者是運行時多態性。</p>\n</li>\n<li><p>####JVM加載class文件的原理機制</p>\n<p>類的裝載有類加載器（ClassLoader)和它的子類實現。過程如下:  </p>\n<p><strong>加載</strong>：把.class文件中的數據讀到內存中  </p>\n<p>&nbsp;&nbsp;|<br>&nbsp;&nbsp;|    </p>\n<p><strong>連接</strong>：（驗證、準備、解析）為靜態變量分配內存，并設置默認的初始值，將符號引用替換為直接引用。  </p>\n<p>&nbsp;&nbsp;|<br>&nbsp;&nbsp;|  </p>\n<p><strong>初始化</strong>：</p>\n<ul>\n<li>如果類存在直接的父類且這個父類還未初始化，則先初始化父類</li>\n<li>如果類中存在初始化語句則依次執行  </li>\n</ul>\n</li>\n<li><p>####如何實現對象的克隆<br>此處列舉深度克隆的方式。<br><pre><br>public static <t extends=\"\" serializable=\"\"> T clone(T obj) throws Exception(){<br>  //將對象寫入流中<br>  ByteOutputStream bout = new ByteArrayOutputStream();<br>  ObjectOutputStream oos = new ObjectOutputStram(bout);<br>  oos.write(obj);<br>  //從流中讀取對象<br>  ByteInputStream bin = new ByteArrayInputStream(bout.toByteArray());<br>  ObjectInputStream ois = new ObjectInputStream(bin);<br>  return (T)ois.readObject();<br>}<br></t></pre><br>參考 <a href=\"https://www.cnblogs.com/Qian123/p/5710533.html\" target=\"_blank\" rel=\"noopener\">實現對象克隆的兩種方式</a></p>\n</li>\n<li><p>####常見的異常分類<br>關於Exception更多詳細信息點擊<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">這裡</a>  </p>\n</li>\n<li><p>####闡述ArrayList、Vector、LinkedList的存儲性能和特性</p>\n<ul>\n<li><p>ArrayList和Vector都是使用數組的方式來存儲數據，查詢速度快，插入數據慢。  </p>\n</li>\n<li><p>Vector的方法有synchronized 修飾，性能上比ArrayList差。  </p>\n</li>\n<li><p>LinkedList使用雙向鏈錶實現存儲。插入速度快。</p>\n</li>\n<li><p>Vector,Hashtable,Dictionary,BitSet,Stack,Properties是遺留容器，不推薦使用。  </p>\n</li>\n<li><p>ArrayList和LinkedList都是非線程安全的，可用Collections中synchronizedList方法變為線程安全的</p>\n</li>\n</ul>\n</li>\n<li><p>####Colledtion和Collections的區別<br>Collection是Set,List登容器的父接口；Collections是一個工具類，提供靜態方法來輔助容器操作。</p>\n</li>\n<li><p>####TreeMap和TreeSet在排序時如何比較元素？Collections工具類中的sort()方法如何比較元素？<br>簡單記：  </p>\n<ul>\n<li><p>實現Comparable接口，重寫compareTo方法  </p>\n</li>\n<li><p>採用Collections中sort方法，如下 </p>\n  <pre>  \n  //obj為要排序的對象，第二個參數為自定義的排序規則\n  Collections.sort(obj,new Comparator<object>(){  \n      public int compare(Object o1,Object o2){  \n          return o1.hashCode()-o2.hashCode();\n      }\n  }  \n  </object></pre>    \n</li>\n</ul>\n</li>\n<li><p>####Thread類的sleep()方法和對象的wait()方法都可以讓線程暫停執行，它們有什麼區別？<br>它們的共同點是調用此方法會讓當前線程暫停執行制定的時間。</p>\n<ul>\n<li>sleep方法是Thread類的靜態方法，但對象鎖依然保持。</li>\n<li>wait()方法是Object類的方法，調用后會放棄當前對象的鎖，進入對象的等待池，只有調用對象的nodify()或notifYAll()才能喚醒等待池中的線程進入等鎖池，如果線程重新獲得對象的鎖就可以進入就緒狀態。</li>\n</ul>\n</li>\n<li><p>####sleep方法和yield方法有什麼區別？</p>\n<ul>\n<li>sleep給其它線程運行時會不考慮線程優先級，會給底優先級線程以運行的機會，yield只能把機會給相同優先級或更高優先級的線程</li>\n<li>線程執行sleep后進入阻塞狀態，執行yield方法后進入就緒狀態</li>\n<li>sleep方法需要拋出InterruptedException</li>\n<li>sleep方法比yield（跟操作系統的cpu有關）具有更好的移植性  </li>\n</ul>\n</li>\n<li><p>####請說出與線程同步以及線程調度相關的方法</p>\n<ul>\n<li>wait():使一個線程處於阻塞狀態，並且釋放對象所持有的鎖；</li>\n<li>sleep():讓線程進入睡眠狀態</li>\n<li>notify():喚醒一個處於等待狀態的線程，但不能確切的喚醒某一個等待的線程，而是有JVM確定</li>\n<li>notifyAll():喚醒所有處於等待狀態的線程，該方法並不是將對象的鎖給所有線程，而是讓他們去競爭，只有獲得鎖的線程才能進入就緒狀態。</li>\n</ul>\n</li>\n<li><p>####編寫多線程有幾種實現方法<br>java5以前有兩種：</p>\n<ul>\n<li>繼承Thread類</li>\n<li>實現Runnable接口<br>兩種方式都需要通過重寫run()方法來定義線程的行為，後者更加靈活<br>java5以後還可以通過：實現Callable和ExecutorService等來創建（待補充）。</li>\n</ul>\n</li>\n<li><p>####什麼是線程池？<br>“池化技術”產生的原因：盡可能的減少對象創建和銷毀的次數，從而減少資源的消耗。如線程池，數據庫連接池。<br>線程池就是事先創建若干個可執行的線程放入一個容器中，需要的時候從池中獲取而不需要自行創建，使用完放回池中。<br>線程工具類Executors提供一些靜態工廠方法，生成一些常用的線程池。</p>\n<ul>\n<li>newSingleThreadExecutor：單線程線程池，該線程池保證所有任務的執行順序按照任務的提交順序執行。一個不行了另一個接著上。</li>\n<li>newFixedThreadPool:創建固定大小的線程池，線程池大小一旦達到最大值就保持不變。</li>\n<li>newCachedThreadPool:可緩存的線程池。當線程池大小超過處理任務所需線程數，則回收空閒線程，若不夠用，則新建線程來補充    ，最終線程池大小取決於jvm能夠創建的最大線程數</li>\n<li>newScheduledThreadPool:創建一個大小無線的線程池。該線程池支持定時以及週期性執行任務的需求。     </li>\n</ul>\n</li>\n<li><p>####線程的基本狀態以及狀態之間的關係<br><img src=\"https://coding.net/u/sukianata/p/ImgRepository/git/raw/master/java/Thread.png\" alt=\"\"><br>說明：  </p>\n<pre>\n     Blocked in Object's Wait Pool  對象等待池  \n     Blocked in Object's Lock Pool    等鎖池  \n      Runnable                       就緒狀態  \n     Running                        運行狀態\n     Blocked                        阻塞狀態\n</pre>  </li>\n<li><p>####synchronized和java.util.concurrent.locks.Lock的異同<br>Lock能完成synchronized所實現的所有功能。主要不同點：Lock有比synchronized更精確的線程語義和更好的性能，而且不強制性的要求一定要獲得鎖。synchronized會自動釋放鎖，而Lock一定要求程序員手工釋放。</p>\n</li>\n<li><p>java中有幾種類型的流<br>字節流和字符流。字節流繼承于InputStream,OutputStream,字符流繼承與Reader,Writer。<br>編程實現文件拷貝，此處列出NIO的形式。<br><pre><br>public static void fileCopyNIO(String soure,String target) throws IOException{<br>  try(FileInputStram in =new FileInputStream(source)){</pre></p>\n<pre><code>try(FileOutputStream out = new FileOutputStream(target)){\n    FileChannel inChannel = in.getChannel();\n    FileChannel outChannel =out.getChannel();\n    ByteBuffer buffer = ByteBuffer.allocate(4096);\n    while(inChannel.read(buffer) !=-1){\n        buffer.flip();\n        outChannel.write(buffer);    \n        buffer.clear();\n    }\n }\n</code></pre><p>  }<br>}<br><br>此處用到了java7的新特性try…with..resource格式。</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhu7qk5c0003kwmkijn4ahjq","category_id":"cjhu7qk5g0006kwmk737dn1a4","_id":"cjhu7qk5p000ckwmk3uu1wuwk"},{"post_id":"cjhu7qk5e0005kwmkek5mvtcs","category_id":"cjhu7qk5g0006kwmk737dn1a4","_id":"cjhu7qk5s000fkwmkdytwc2hk"}],"PostTag":[{"post_id":"cjhu7qk5c0003kwmkijn4ahjq","tag_id":"cjhu7qk5j0007kwmk0nzkrd20","_id":"cjhu7qk5r000ekwmkfbs5nrxe"},{"post_id":"cjhu7qk5c0003kwmkijn4ahjq","tag_id":"cjhu7qk5n000bkwmkb96xzjh4","_id":"cjhu7qk5s000gkwmknem0h235"},{"post_id":"cjhu7qk5e0005kwmkek5mvtcs","tag_id":"cjhu7qk5j0007kwmk0nzkrd20","_id":"cjhu7qk5u000jkwmkkkmetfyn"},{"post_id":"cjhu7qk5e0005kwmkek5mvtcs","tag_id":"cjhu7qk5n000bkwmkb96xzjh4","_id":"cjhu7qk5u000kkwmk9wpw19c5"},{"post_id":"cjhu7qk5k0008kwmky4p2cc9o","tag_id":"cjhu7qk5t000ikwmks2v9x0tq","_id":"cjhu7qk5v000mkwmkpwpsk53a"},{"post_id":"cjhu7qk5l0009kwmkiycyg1go","tag_id":"cjhu7qk5u000lkwmktgc06x82","_id":"cjhu7qk5w000nkwmkmr3k5iax"}],"Tag":[{"name":"标签1","_id":"cjhu7qk5j0007kwmk0nzkrd20"},{"name":"标签2","_id":"cjhu7qk5n000bkwmkb96xzjh4"},{"name":"other","_id":"cjhu7qk5t000ikwmks2v9x0tq"},{"name":"java","_id":"cjhu7qk5u000lkwmktgc06x82"}]}}